{"version":3,"sources":["assets\\scripts\\common\\util\\Events.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EventName } from \"../const/EventName\";\r\n\r\n/**\r\n * 装饰器预加载数据\r\n */\r\ninterface PreloadData {\r\n    /** 事件名 */\r\n    event: EventName;\r\n    /** 事件回调函数名 */\r\n    funcName: string;\r\n    /** 事件是否只会触发一次 */\r\n    once: boolean;\r\n}\r\n\r\n/**\r\n * 监听器\r\n */\r\ninterface Listener {\r\n    /** 回调 */\r\n    cb: (...args: unknown[]) => void;\r\n    /** 是否只触发一次 */\r\n    once: boolean;\r\n}\r\n\r\n//#region 装饰器\r\n\r\n/**\r\n * 重写类方法\r\n * @param constructor 构造函数\r\n * @param onKey 在该方法内部调用Events.targetOn\r\n * @param offKey 在该方法内部调用Events.targetOff\r\n * @param onSuper 是否注册父类成员方法上绑定的事件，默认true\r\n */\r\nfunction rewrite(constructor: any, onKey: string, offKey: string, onSuper: boolean = true): void {\r\n    let onFunc = constructor.prototype[onKey];\r\n    let offFunc = constructor.prototype[offKey];\r\n    constructor.prototype[onKey] = function () {\r\n        Events.targetOn(this, onSuper);\r\n        onFunc && onFunc.call(this);\r\n    }\r\n    constructor.prototype[offKey] = function () {\r\n        Events.targetOff(this);\r\n        offFunc && offFunc.call(this);\r\n    }\r\n}\r\n\r\n/**\r\n * 类装饰器。用于覆盖onLoad和onDestroy方法，在onLoad中注册preloadEvent绑定的所有事件，在onDestroy注销绑定的所有事件\r\n * @param onSuper 是否注册父类成员方法上绑定的事件，默认true\r\n */\r\nexport function eventsOnLoad(onSuper: boolean = true): (constructor: any) => void {\r\n    return function (constructor: any) {\r\n        rewrite(constructor, \"onLoad\", \"onDestroy\", onSuper);\r\n    };\r\n}\r\n\r\n/**\r\n * 类装饰器。用于覆盖onEnable和onDisable方法，在onEnable中注册preloadEvent绑定的所有事件，在onDisable注销绑定的所有事件\r\n * @param onSuper 是否注册父类成员方法上绑定的事件，默认true\r\n */\r\nexport function eventsOnEnable(onSuper: boolean = true): (constructor: any) => void {\r\n    return function (constructor: any) {\r\n        rewrite(constructor, \"onEnable\", \"onDisable\", onSuper);\r\n    };\r\n}\r\n\r\n/**\r\n * 非静态成员方法装饰器。用于预先载入待注册的事件，配合eventsOnLoad、eventsOnEnable、targetOn使用\r\n * @param event 事件名\r\n * @param once 事件是否只会触发一次，默认false\r\n */\r\nexport function preloadEvent(event: EventName, once: boolean = false): (target: any, funcName: string, desc: PropertyDescriptor) => void {\r\n    return function (target: any, funcName: string, desc: PropertyDescriptor) {\r\n        let arr = Events.classMap.get(target.constructor);\r\n        if (arr === undefined) {\r\n            arr = [];\r\n            Events.classMap.set(target.constructor, arr);\r\n        } else {\r\n            let find = arr.find((e) => {\r\n                return e.event === event && e.funcName === funcName;\r\n            });\r\n            if (find) {\r\n                cc.error(`event: ${EventName[event]} 重复载入`);\r\n                return;\r\n            }\r\n        }\r\n\r\n        arr.push({\r\n            event: event,\r\n            funcName: funcName,\r\n            once: once\r\n        });\r\n    };\r\n}\r\n\r\n//#endregion\r\n\r\n/**\r\n * 事件收发管理类\r\n */\r\nexport default class Events {\r\n    /**\r\n     * 预加载数据，存储构造函数、监听事件、监听函数名，用于实例化时注册事件\r\n     */\r\n    public static classMap: Map<Function, PreloadData[]> = new Map();\r\n\r\n    /**\r\n     * 存储监听事件、监听函数与监听对象\r\n     */\r\n    private static _eventsMap: Map<EventName, Map<Object, Listener[]>> = new Map();\r\n\r\n    /**\r\n     * 注册与target构造函数预先绑定的所有事件\r\n     * @param target 注册目标\r\n     * @param onSuper 是否注册父类成员方法上绑定的事件，默认true\r\n     */\r\n    public static targetOn(target: Object, onSuper: boolean = true): void {\r\n        if (onSuper) {\r\n            this.classMap.forEach((value: PreloadData[], key: Function) => {\r\n                if (target instanceof key) {\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        let e = value[i];\r\n                        this.on(e.event, target[e.funcName], target, e.once);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            let arr = this.classMap.get(target.constructor);\r\n            if (arr) {\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    let e = arr[i];\r\n                    this.on(e.event, target[e.funcName], target, e.once);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注册事件\r\n     * @param event 事件名\r\n     * @param cb 处理事件的监听函数\r\n     * @param target 注册目标\r\n     * @param once 事件是否只会触发一次，默认false\r\n     */\r\n    public static on(event: EventName, cb: (...args: any[]) => void, target: Object, once: boolean = false): void {\r\n        if (!cb || !target) {\r\n            cc.error(`event: ${EventName[event]} listener或target不能为空`);\r\n            return;\r\n        }\r\n\r\n        let map: Map<Object, Listener[]> = this._eventsMap.get(event);\r\n        let list: Listener[] = [];\r\n        if (map === undefined) {\r\n            map = new Map();\r\n            map.set(target, list);\r\n            this._eventsMap.set(event, map);\r\n        } else {\r\n            list = map.get(target);\r\n            if (list === undefined) {\r\n                list = [];\r\n                map.set(target, list);\r\n            } else {\r\n                let result = list.find((e) => { return e.cb === cb; });\r\n                if (result) {\r\n                    cc.error(`event: ${EventName[event]} 重复注册`);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        let listener: Listener = {\r\n            cb: cb,\r\n            once: once\r\n        };\r\n        list.push(listener);\r\n    }\r\n\r\n    /**\r\n     * 注册事件，触发一次后自动注销\r\n     * @param event 事件名\r\n     * @param cb 处理事件的监听函数\r\n     * @param target 注册目标\r\n     */\r\n    public static once(event: EventName, cb: (...args: any[]) => void, target: Object): void {\r\n        this.on(event, cb, target, true);\r\n    }\r\n\r\n    /**\r\n     * 移除事件\r\n     * @param event 事件名\r\n     * @param cb 处理事件的监听函数\r\n     * @param target 注册目标\r\n     */\r\n    public static off(event: EventName, cb: (...args: any[]) => void, target: Object): void {\r\n        if (!cb || !target) {\r\n            cc.error(`event: ${EventName[event]} listener或target不能为空`);\r\n            return;\r\n        }\r\n\r\n        let map: Map<Object, Listener[]> = this._eventsMap.get(event);\r\n        if (map === undefined) {\r\n            cc.error(`event: ${EventName[event]} 未注册该事件`);\r\n            return;\r\n        }\r\n\r\n        let list: Listener[] = map.get(target);\r\n        if (list === undefined) {\r\n            cc.error(`event: ${EventName[event]} target上未注册该事件`);\r\n            return;\r\n        }\r\n\r\n        let index = list.findIndex((e) => { return e.cb === cb; });\r\n        if (index < 0) {\r\n            cc.error(`event: ${EventName[event]} target上未以该listener注册该事件`);\r\n            return;\r\n        }\r\n\r\n        list.splice(index, 1);\r\n        if (list.length <= 0) {\r\n            map.delete(target);\r\n            map.size <= 0 && this._eventsMap.delete(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除target上注册的所有事件\r\n     * @param target 注册目标\r\n     */\r\n    public static targetOff(target: Object): void {\r\n        if (!target) {\r\n            cc.error(`event: ${target} target不能为空`);\r\n            return;\r\n        }\r\n\r\n        this._eventsMap.forEach((map, event) => {\r\n            map.delete(target);\r\n            map.size <= 0 && this._eventsMap.delete(event);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 派发事件\r\n     * @param event 事件名\r\n     * @param args 事件参数\r\n     */\r\n    public static emit(event: EventName, ...args: unknown[]): void {\r\n        let map: Map<Object, Listener[]> = this._eventsMap.get(event);\r\n        if (map === undefined) {\r\n            cc.warn(`event: ${EventName[event]} 未注册该事件`);\r\n            return;\r\n        }\r\n\r\n        let i: number;\r\n        let callArr: Array<{ cb: (...args: unknown[]) => void; target: Object }> = [];\r\n        let onceArr: Array<{ cb: (...args: unknown[]) => void; target: Object }> = [];\r\n        map.forEach((list, target) => {\r\n            for (i = 0; i < list.length; i++) {\r\n                let listener = list[i];\r\n                callArr.push({ cb: listener.cb, target: target });\r\n                if (listener.once) {\r\n                    onceArr.push({ cb: listener.cb, target: target });\r\n                }\r\n            }\r\n        });\r\n        // 移除所有once的监听\r\n        for (i = 0; i < onceArr.length; i++) {\r\n            let e = onceArr[i];\r\n            this.off(event, e.cb, e.target);\r\n        }\r\n        // 延迟到此处调用事件回调，防止受到回调过程中的 注册/注销 影响\r\n        for (i = 0; i < callArr.length; i++) {\r\n            let e = callArr[i];\r\n            e.cb.apply(e.target, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 派发事件--异步\r\n     * @param event 事件名\r\n     * @param args 事件参数\r\n     */\r\n    public static async emitAsync(event: EventName, ...args: unknown[]): Promise<void> {\r\n        let map: Map<Object, Listener[]> = this._eventsMap.get(event);\r\n        if (map === undefined) {\r\n            cc.warn(`event: ${EventName[event]} 未注册该事件`);\r\n            return;\r\n        }\r\n\r\n        let i: number;\r\n        let callArr: Array<{ cb: (...args: unknown[]) => void; target: Object }> = [];\r\n        let onceArr: Array<{ cb: (...args: unknown[]) => void; target: Object }> = [];\r\n        map.forEach((list, target) => {\r\n            for (i = 0; i < list.length; i++) {\r\n                let listener = list[i];\r\n                callArr.push({ cb: listener.cb, target: target });\r\n                if (listener.once) {\r\n                    onceArr.push({ cb: listener.cb, target: target });\r\n                }\r\n            }\r\n        });\r\n        // 移除所有once的监听\r\n        for (i = 0; i < onceArr.length; i++) {\r\n            let e = onceArr[i];\r\n            this.off(event, e.cb, e.target);\r\n        }\r\n        // 延迟到此处调用事件回调，防止受到回调过程中的 注册/注销 影响\r\n        let arr: Promise<unknown>[] = [];\r\n        for (i = 0; i < callArr.length; i++) {\r\n            let e = callArr[i];\r\n            arr.push(e.cb.apply(e.target, args));\r\n        }\r\n        await Promise.all(arr);\r\n    }\r\n}\r\n"]}