{"version":3,"sources":["assets\\scripts\\common\\util\\RecyclePool.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 用于使用节点池的节点所绑定脚本组件实现\r\n */\r\nexport interface RecycleNode {\r\n    /** 回收前调用 */\r\n    unuse(): void;\r\n    /** 取出前调用 */\r\n    reuse(): void;\r\n}\r\n\r\n/**\r\n * 节点池\r\n */\r\nexport default class RecyclePool {\r\n    /** 以url标记的节点池 */\r\n    private static _urlMap: Map<string, cc.Node[]> = new Map();\r\n    /** 以cccomponent标记的节点池，需要实现接口RecycleNode */\r\n    private static _cmptMap: Map<{ prototype: cc.Component }, cc.Node[]> = new Map();\r\n\r\n    /** 单个节点池的最大节点数量 */\r\n    public static limit: number = 512;\r\n\r\n    /**\r\n     * 获取节点池中节点数量\r\n     */\r\n    public static size(key: string | { prototype: cc.Component }): number {\r\n        let list = typeof key === \"string\" ? this._urlMap.get(key) : this._cmptMap.get(key);\r\n        if (list === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        return list.length;\r\n    }\r\n\r\n    /**\r\n     * 清空节点\r\n     */\r\n    public static clear(key: string | { prototype: cc.Component }): void {\r\n        if (typeof key === \"string\") {\r\n            let list = this._urlMap.get(key);\r\n            if (list === undefined) {\r\n                return;\r\n            }\r\n\r\n            let count = list.length;\r\n            for (let i = 0; i < count; ++i) {\r\n                list[i].destroy();\r\n            }\r\n            list.length = 0;\r\n            this._urlMap.delete(key);\r\n        } else {\r\n            let list = this._cmptMap.get(key);\r\n            if (list === undefined) {\r\n                return;\r\n            }\r\n\r\n            let count = list.length;\r\n            for (let i = 0; i < count; ++i) {\r\n                list[i].destroy();\r\n            }\r\n            list.length = 0;\r\n            this._cmptMap.delete(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清空全部节点\r\n     */\r\n    public static clearAll(): void {\r\n        this._urlMap.forEach((list: cc.Node[]) => {\r\n            let count = list.length;\r\n            for (let i = 0; i < count; ++i) {\r\n                list[i].destroy();\r\n            }\r\n        });\r\n        this._urlMap.clear();\r\n\r\n        this._cmptMap.forEach((list: cc.Node[]) => {\r\n            let count = list.length;\r\n            for (let i = 0; i < count; ++i) {\r\n                list[i].destroy();\r\n            }\r\n        });\r\n        this._cmptMap.clear();\r\n    }\r\n\r\n    /**\r\n     * 根据类型从节点池取出节点\r\n     */\r\n    public static get(key: string | { prototype: cc.Component }): cc.Node {\r\n        if (typeof key === \"string\") {\r\n            let list = this._urlMap.get(key);\r\n            if (list === undefined || list.length <= 0) {\r\n                return null;\r\n            }\r\n\r\n            let last = list.length - 1;\r\n            let node = list[last];\r\n            list.length = last;\r\n            return node;\r\n        } else {\r\n            let list = this._cmptMap.get(key);\r\n            if (list === undefined || list.length <= 0) {\r\n                return null;\r\n            }\r\n\r\n            let last = list.length - 1;\r\n            let node = list[last];\r\n            list.length = last;\r\n            // Invoke pool handler\r\n            let handler: any = node.getComponent(key);\r\n            if (handler && handler.reuse) {\r\n                handler.reuse();\r\n            }\r\n            return node;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据类型将节点放入节点池\r\n     */\r\n    public static put(key: string | { prototype: cc.Component }, node: cc.Node): void {\r\n        if (!node) {\r\n            cc.error(`[RecyclePool.put] error: 传入节点为空`);\r\n            return;\r\n        }\r\n\r\n        if (typeof key === \"string\") {\r\n            let list = this._urlMap.get(key);\r\n            if (list === undefined) {\r\n                list = [];\r\n                this._urlMap.set(key, list);\r\n            } else if (list.indexOf(node) !== -1) {\r\n                cc.error(`[RecyclePool.put] error: 不可将节点重复放入节点池中`);\r\n                return;\r\n            } else if (list.length >= RecyclePool.limit) {\r\n                node.destroy();\r\n                cc.warn(`[RecyclePool.put] warn: 节点池到达最大数量 key: ${key}`);\r\n                return;\r\n            }\r\n\r\n            node.removeFromParent(false);\r\n            list.push(node);\r\n        } else {\r\n            let list = this._cmptMap.get(key);\r\n            if (list === undefined) {\r\n                list = [];\r\n                this._cmptMap.set(key, list);\r\n            } else if (list.indexOf(node) !== -1) {\r\n                cc.error(`[RecyclePool.put] error: 不可将节点重复放入节点池中`);\r\n                return;\r\n            } else if (list.length >= RecyclePool.limit) {\r\n                node.destroy();\r\n                cc.warn(`[RecyclePool.put] warn: 节点池到达最大数量 key: ${key}`);\r\n                return;\r\n            }\r\n\r\n            node.removeFromParent(false);\r\n            // Invoke pool handler\r\n            let handler: any = node.getComponent(key);\r\n            if (handler && handler.unuse) {\r\n                handler.unuse();\r\n            }\r\n            list.push(node);\r\n        }\r\n    }\r\n}\r\n"]}