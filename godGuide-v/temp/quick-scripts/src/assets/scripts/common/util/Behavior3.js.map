{"version":3,"sources":["assets\\scripts\\common\\util\\Behavior3.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 节点状态\r\n */\r\nexport enum B3State {\r\n    SUCCESS = 1,\r\n    FAILURE = 2,\r\n    RUNNING = 3,\r\n    ERROR = 4\r\n}\r\n\r\n/**\r\n * The BehaviorTree class, as the name implies, represents the Behavior Tree \r\n * structure.\r\n * \r\n * There are two ways to construct a Behavior Tree: by manually setting the \r\n * root node, or by loading it from a data structure (which can be loaded \r\n * from a JSON). Both methods are shown in the examples below and better \r\n * explained in the user guide.\r\n *\r\n * The tick method must be called periodically, in order to send the tick \r\n * signal to all nodes in the tree, starting from the root. The method \r\n * `BehaviorTree.tick` receives a target object and a blackboard as \r\n * parameters. The target object can be anything: a game agent, a system, a \r\n * DOM object, etc. This target is not used by any piece of Behavior3JS, \r\n * i.e., the target object will only be used by custom nodes.\r\n * \r\n * The blackboard is obligatory and must be an instance of `Blackboard`. This\r\n * requirement is necessary due to the fact that neither `BehaviorTree` or \r\n * any node will store the execution variables in its own object (e.g., the \r\n * BT does not store the target, information about opened nodes or number of \r\n * times the tree was called). But because of this, you only need a single \r\n * tree instance to control multiple (maybe hundreds) objects.\r\n * \r\n * Manual construction of a Behavior Tree\r\n * --------------------------------------\r\n * \r\n *     var tree = new b3.BehaviorTree();\r\n *  \r\n *     tree.root = new b3.Sequence({children:[\r\n *       new b3.Priority({children:[\r\n *         new MyCustomNode(),\r\n *         new MyCustomNode()\r\n *       ]}),\r\n *       ...\r\n *     ]});\r\n *     \r\n * \r\n * Loading a Behavior Tree from data structure\r\n * -------------------------------------------\r\n * \r\n *     var tree = new b3.BehaviorTree();\r\n *\r\n *     tree.load({\r\n *       \"title\"       : \"Behavior Tree title\"\r\n *       \"description\" : \"My description\"\r\n *       \"root\"        : \"node-id-1\"\r\n *       \"nodes\"       : {\r\n *         \"node-id-1\" : {\r\n *           \"name\"        : \"Priority\", // this is the node type\r\n *           \"title\"       : \"Root Node\", \r\n *           \"description\" : \"Description\", \r\n *           \"children\"    : [\"node-id-2\", \"node-id-3\"], \r\n *         },\r\n *         ...\r\n *       }\r\n *     })\r\n *     \r\n *\r\n * @module b3\r\n * @class BehaviorTree\r\n */\r\nexport class B3BehaviorTree {\r\n\r\n    /**\r\n     * The tree id, must be unique. By default, created with `b3.createUUID`.\r\n     * @readOnly\r\n     */\r\n    id: string = null;\r\n\r\n    /**\r\n     * The tree title.\r\n     * @readonly\r\n     */\r\n    title: string = null;\r\n\r\n    /**\r\n     * Description of the tree.\r\n     * @readonly\r\n     */\r\n    description: string = null;\r\n\r\n    /**\r\n     * A dictionary with (key-value) properties. Useful to define custom \r\n     * variables in the visual editor.\r\n     * @readonly\r\n     */\r\n    properties: Record<string, any> = null;\r\n\r\n    /**\r\n     * The reference to the root node. Must be an instance of `b3.BaseNode`.\r\n     */\r\n    root: B3BaseNode = null;\r\n\r\n    /**\r\n     * The reference to the debug instance.\r\n     */\r\n    debug: any = null;\r\n\r\n    /**\r\n     * Initialization method.\r\n     */\r\n    constructor() {\r\n        this.id = b3.createUUID();\r\n        this.title = \"The behavior tree\";\r\n        this.description = \"Default description\";\r\n        this.properties = {};\r\n        this.root = null;\r\n        this.debug = null;\r\n    }\r\n\r\n    /**\r\n     * This method loads a Behavior Tree from a data structure, populating this\r\n     * object with the provided data. Notice that, the data structure must \r\n     * follow the format specified by Behavior3JS. Consult the guide to know \r\n     * more about this format.\r\n     *\r\n     * You probably want to use custom nodes in your BTs, thus, you need to \r\n     * provide the `names` object, in which this method can find the nodes by \r\n     * `names[NODE_NAME]`. This variable can be a namespace or a dictionary, \r\n     * as long as this method can find the node by its name, for example:\r\n     *\r\n     *     //json\r\n     *     ...\r\n     *     \"node1\": {\r\n     *       \"name\": MyCustomNode,\r\n     *       \"title\": ...\r\n     *     }\r\n     *     ...\r\n     *     \r\n     *     //code\r\n     *     var bt = new b3.BehaviorTree();\r\n     *     bt.load(data, {\"MyCustomNode\":MyCustomNode})\r\n     *     \r\n     * \r\n     * @method load\r\n     * @param data The data structure representing a Behavior Tree.\r\n     * @param names A namespace or dict containing custom nodes.\r\n     */\r\n    load(data: any, names?: Record<string, typeof B3BaseNode>) {\r\n        names = names || {};\r\n\r\n        this.title = data.title || this.title;\r\n        this.description = data.description || this.description;\r\n        this.properties = data.properties || this.properties;\r\n\r\n        var nodes = {};\r\n        var id, spec, node;\r\n        // Create the node list (without connection between them)\r\n        for (id in data.nodes) {\r\n            spec = data.nodes[id];\r\n            var Cls;\r\n\r\n            if (spec.name in names) {\r\n                // Look for the name in custom nodes\r\n                Cls = names[spec.name];\r\n            } else if (spec.name in b3) {\r\n                // Look for the name in default nodes\r\n                Cls = b3[spec.name];\r\n            } else {\r\n                // Invalid node name\r\n                throw new EvalError('BehaviorTree.load: Invalid node name + \"' +\r\n                    spec.name + '\".');\r\n            }\r\n\r\n            node = new Cls(spec.properties);\r\n            node.id = spec.id || node.id;\r\n            node.title = spec.title || node.title;\r\n            node.description = spec.description || node.description;\r\n            node.properties = spec.properties || node.properties;\r\n\r\n            nodes[id] = node;\r\n        }\r\n\r\n        // Connect the nodes\r\n        for (id in data.nodes) {\r\n            spec = data.nodes[id];\r\n            node = nodes[id];\r\n\r\n            if (node.category === b3.COMPOSITE && spec.children) {\r\n                for (var i = 0; i < spec.children.length; i++) {\r\n                    var cid = spec.children[i];\r\n                    node.children.push(nodes[cid]);\r\n                }\r\n            } else if (node.category === b3.DECORATOR && spec.child) {\r\n                node.child = nodes[spec.child];\r\n            }\r\n        }\r\n\r\n        this.root = nodes[data.root];\r\n    }\r\n\r\n    /**\r\n     * This method dump the current BT into a data structure.\r\n     *\r\n     * Note: This method does not record the current node parameters. Thus, \r\n     * it may not be compatible with load for now.\r\n     * \r\n     * @method dump\r\n     * @return {Object} A data object representing this tree.\r\n     */\r\n    dump(): any {\r\n        var data: any = {};\r\n        var customNames = [];\r\n\r\n        data.title = this.title;\r\n        data.description = this.description;\r\n        data.root = (this.root) ? this.root.id : null;\r\n        data.properties = this.properties;\r\n        data.nodes = {};\r\n        data.custom_nodes = [];\r\n\r\n        if (!this.root) return data;\r\n\r\n        var stack = [this.root];\r\n        while (stack.length > 0) {\r\n            var node = stack.pop();\r\n\r\n            var spec: any = {};\r\n            spec.id = node.id;\r\n            spec.name = node.name;\r\n            spec.title = node.title;\r\n            spec.description = node.description;\r\n            spec.properties = node.properties;\r\n            spec.parameters = node.parameters;\r\n\r\n            // verify custom node\r\n            var proto = (node.constructor && node.constructor.prototype);\r\n            var nodeName = (proto && proto.name) || node.name;\r\n            if (!b3[nodeName] && customNames.indexOf(nodeName) < 0) {\r\n                var subdata: any = {};\r\n                subdata.name = nodeName;\r\n                subdata.title = (proto && proto.title) || node.title;\r\n                subdata.category = node.category;\r\n\r\n                customNames.push(nodeName);\r\n                data.custom_nodes.push(subdata);\r\n            }\r\n\r\n            // store children/child\r\n            if (node.category === b3.COMPOSITE && node.children) {\r\n                var children = [];\r\n                for (var i = node.children.length - 1; i >= 0; i--) {\r\n                    children.push(node.children[i].id);\r\n                    stack.push(node.children[i]);\r\n                }\r\n                spec.children = children;\r\n            } else if (node.category === b3.DECORATOR && node.child) {\r\n                stack.push(node.child);\r\n                spec.child = node.child.id;\r\n            }\r\n\r\n            data.nodes[node.id] = spec;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Propagates the tick signal through the tree, starting from the root.\r\n     * \r\n     * This method receives a target object of any type (Object, Array, \r\n     * DOMElement, whatever) and a `Blackboard` instance. The target object has\r\n     * no use at all for all Behavior3JS components, but surely is important \r\n     * for custom nodes. The blackboard instance is used by the tree and nodes \r\n     * to store execution variables (e.g., last node running) and is obligatory\r\n     * to be a `Blackboard` instance (or an object with the same interface).\r\n     * \r\n     * Internally, this method creates a Tick object, which will store the \r\n     * target and the blackboard objects.\r\n     * \r\n     * Note: BehaviorTree stores a list of open nodes from last tick, if these \r\n     * nodes weren\"t called after the current tick, this method will close them\r\n     * automatically.\r\n     * \r\n     * @method tick\r\n     * @param target A target object.\r\n     * @param blackboard An instance of blackboard object.\r\n     * @return {Constant} The tick signal state.\r\n     */\r\n    tick(target: any, blackboard: B3Blackboard): B3State {\r\n        if (!blackboard) {\r\n            throw \"The blackboard parameter is obligatory and must be an \" +\r\n            \"instance of b3.Blackboard\";\r\n        }\r\n\r\n        /* CREATE A TICK OBJECT */\r\n        var tick = new B3Tick();\r\n        tick.debug = this.debug;\r\n        tick.target = target;\r\n        tick.blackboard = blackboard;\r\n        tick.tree = this;\r\n\r\n        /* TICK NODE */\r\n        var state = this.root._execute(tick);\r\n\r\n        /* CLOSE NODES FROM LAST TICK, IF NEEDED */\r\n        var lastOpenNodes = blackboard.get(\"openNodes\", this.id);\r\n        var currOpenNodes = tick._openNodes.slice(0);\r\n\r\n        // does not close if it is still open in this tick\r\n        var start = 0;\r\n        var i;\r\n        for (i = 0; i < Math.min(lastOpenNodes.length, currOpenNodes.length); i++) {\r\n            start = i + 1;\r\n            if (lastOpenNodes[i] !== currOpenNodes[i]) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // close the nodes\r\n        for (i = lastOpenNodes.length - 1; i >= start; i--) {\r\n            lastOpenNodes[i]._close(tick);\r\n        }\r\n\r\n        /* POPULATE BLACKBOARD */\r\n        blackboard.set(\"openNodes\", currOpenNodes, this.id);\r\n        blackboard.set(\"nodeCount\", tick._nodeCount, this.id);\r\n\r\n        return state;\r\n    }\r\n}\r\n\r\n/**\r\n * A new Tick object is instantiated every tick by BehaviorTree. It is passed\r\n * as parameter to the nodes through the tree during the traversal.\r\n * \r\n * The role of the Tick class is to store the instances of tree, debug, \r\n * target and blackboard. So, all nodes can access these informations.\r\n * \r\n * For internal uses, the Tick also is useful to store the open node after \r\n * the tick signal, in order to let `BehaviorTree` to keep track and close \r\n * them when necessary.\r\n *\r\n * This class also makes a bridge between nodes and the debug, passing the \r\n * node state to the debug if the last is provided.\r\n *\r\n * @module b3\r\n * @class Tick\r\n */\r\nexport class B3Tick {\r\n\r\n    /**\r\n     * The tree reference.\r\n     * @readOnly\r\n     */\r\n    tree: B3BehaviorTree = null;\r\n\r\n    /**\r\n     * The debug reference.\r\n     * @readOnly\r\n     */\r\n    debug: any = null;\r\n\r\n    /**\r\n     * The target object reference.\r\n     * @readOnly\r\n     */\r\n    target: any = null;\r\n\r\n    /**\r\n     * The blackboard reference.\r\n     * @readOnly\r\n     */\r\n    blackboard: B3Blackboard = null;\r\n\r\n    /**\r\n     * The list of open nodes. Update during the tree traversal.\r\n     * @protected\r\n     * @readOnly\r\n     */\r\n    _openNodes: any[] = [];\r\n\r\n    /**\r\n     * The number of nodes entered during the tick. Update during the tree \r\n     * traversal.\r\n     * \r\n     * @property {Integer} _nodeCount\r\n     * @protected\r\n     * @readOnly\r\n     */\r\n    _nodeCount: number = 0;\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // set by BehaviorTree\r\n        this.tree = null;\r\n        this.debug = null;\r\n        this.target = null;\r\n        this.blackboard = null;\r\n\r\n        // updated during the tick signal\r\n        this._openNodes = [];\r\n        this._nodeCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Called when entering a node (called by BaseNode).\r\n     * @method _enterNode\r\n     * @param node The node that called this method.\r\n     * @protected\r\n     */\r\n    _enterNode(node: B3BaseNode) {\r\n        this._nodeCount++;\r\n        this._openNodes.push(node);\r\n\r\n        // TODO: call debug here\r\n    }\r\n\r\n    /**\r\n     * Callback when opening a node (called by BaseNode).\r\n     * @method _openNode\r\n     * @param node The node that called this method.\r\n     * @protected\r\n     */\r\n    _openNode(node: B3BaseNode) {\r\n        // TODO: call debug here\r\n    }\r\n\r\n    /**\r\n     * Callback when ticking a node (called by BaseNode).\r\n     * @method _tickNode\r\n     * @param node The node that called this method.\r\n     * @protected\r\n     */\r\n    _tickNode(node: B3BaseNode) {\r\n        // TODO: call debug here\r\n    }\r\n\r\n    /**\r\n     * Callback when closing a node (called by BaseNode).\r\n     * @method _closeNode\r\n     * @param node The node that called this method.\r\n     * @protected\r\n     */\r\n    _closeNode(node: B3BaseNode) {\r\n        // TODO: call debug here\r\n        this._openNodes.pop();\r\n    }\r\n\r\n    /**\r\n     * Callback when exiting a node (called by BaseNode).\r\n     * @method _exitNode\r\n     * @param node The node that called this method.\r\n     * @protected\r\n     */\r\n    _exitNode(node: B3BaseNode) {\r\n        // TODO: call debug here\r\n    }\r\n}\r\n\r\n/**\r\n * The Blackboard is the memory structure required by `BehaviorTree` and its \r\n * nodes. It only have 2 public methods: `set` and `get`. These methods works\r\n * in 3 different contexts: global, per tree, and per node per tree.\r\n * \r\n * Suppose you have two different trees controlling a single object with a \r\n * single blackboard, then:\r\n *\r\n * - In the global context, all nodes will access the stored information. \r\n * - In per tree context, only nodes sharing the same tree share the stored \r\n *   information.\r\n * - In per node per tree context, the information stored in the blackboard \r\n *   can only be accessed by the same node that wrote the data.\r\n *   \r\n * The context is selected indirectly by the parameters provided to these \r\n * methods, for example:\r\n * \r\n *     // getting/setting variable in global context\r\n *     blackboard.set(\"testKey\", \"value\");\r\n *     var value = blackboard.get(\"testKey\");\r\n *     \r\n *     // getting/setting variable in per tree context\r\n *     blackboard.set(\"testKey\", \"value\", tree.id);\r\n *     var value = blackboard.get(\"testKey\", tree.id);\r\n *     \r\n *     // getting/setting variable in per node per tree context\r\n *     blackboard.set(\"testKey\", \"value\", tree.id, node.id);\r\n *     var value = blackboard.get(\"testKey\", tree.id, node.id);\r\n * \r\n * Note: Internally, the blackboard store these memories in different \r\n * objects, being the global on `_baseMemory`, the per tree on `_treeMemory` \r\n * and the per node per tree dynamically create inside the per tree memory \r\n * (it is accessed via `_treeMemory[id].nodeMemory`). Avoid to use these \r\n * variables manually, use `get` and `set` instead.\r\n *  \r\n * @module b3\r\n * @class Blackboard\r\n */\r\nexport class B3Blackboard {\r\n\r\n    private _baseMemory: Record<string, any> = null;\r\n    private _treeMemory: Record<string, any> = null;\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @method initialize\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        this._baseMemory = {};\r\n        this._treeMemory = {};\r\n    }\r\n\r\n    /**\r\n     * Internal method to retrieve the tree context memory. If the memory does\r\n     * not exist, this method creates it.\r\n     *\r\n     * @method _getTreeMemory\r\n     * @param treeScope The id of the tree in scope.\r\n     * @return {Object} The tree memory.\r\n     * @protected\r\n     */\r\n    _getTreeMemory(treeScope: string): any {\r\n        if (!this._treeMemory[treeScope]) {\r\n            this._treeMemory[treeScope] = {\r\n                \"nodeMemory\": {},\r\n                \"openNodes\": [],\r\n                \"traversalDepth\": 0,\r\n                \"traversalCycle\": 0,\r\n            };\r\n        }\r\n        return this._treeMemory[treeScope];\r\n    }\r\n\r\n    /**\r\n     * Internal method to retrieve the node context memory, given the tree \r\n     * memory. If the memory does not exist, this method creates is.\r\n     *\r\n     * @method _getNodeMemory\r\n     * @param treeMemory the tree memory.\r\n     * @param nodeScope The id of the node in scope.\r\n     * @return {Object} The node memory.\r\n     * @protected\r\n     */\r\n    _getNodeMemory(treeMemory: any, nodeScope: string): any {\r\n        var memory = treeMemory.nodeMemory;\r\n        if (!memory[nodeScope]) {\r\n            memory[nodeScope] = {};\r\n        }\r\n\r\n        return memory[nodeScope];\r\n    }\r\n\r\n    /**\r\n     * Internal method to retrieve the context memory. If treeScope and \r\n     * nodeScope are provided, this method returns the per node per tree \r\n     * memory. If only the treeScope is provided, it returns the per tree \r\n     * memory. If no parameter is provided, it returns the global memory. \r\n     * Notice that, if only nodeScope is provided, this method will still \r\n     * return the global memory.\r\n     *\r\n     * @method _getMemory\r\n     * @param treeScope The id of the tree scope.\r\n     * @param nodeScope The id of the node scope.\r\n     * @return {Object} A memory object.\r\n     * @protected\r\n     */\r\n    _getMemory(treeScope?: string, nodeScope?: string): any {\r\n        var memory = this._baseMemory;\r\n\r\n        if (treeScope) {\r\n            memory = this._getTreeMemory(treeScope);\r\n\r\n            if (nodeScope) {\r\n                memory = this._getNodeMemory(memory, nodeScope);\r\n            }\r\n        }\r\n\r\n        return memory;\r\n    }\r\n\r\n    /**\r\n     * Stores a value in the blackboard. If treeScope and nodeScope are \r\n     * provided, this method will save the value into the per node per tree \r\n     * memory. If only the treeScope is provided, it will save the value into \r\n     * the per tree memory. If no parameter is provided, this method will save \r\n     * the value into the global memory. Notice that, if only nodeScope is \r\n     * provided (but treeScope not), this method will still save the value into\r\n     * the global memory.\r\n     *\r\n     * @method set\r\n     * @param key The key to be stored.\r\n     * @param value The value to be stored.\r\n     * @param treeScope The tree id if accessing the tree or node \r\n     *                           memory.\r\n     * @param nodeScope The node id if accessing the node memory.\r\n     */\r\n    set(key: string, value: any, treeScope?: string, nodeScope?: string): void {\r\n        var memory = this._getMemory(treeScope, nodeScope);\r\n        memory[key] = value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value in the blackboard. If treeScope and nodeScope are\r\n     * provided, this method will retrieve the value from the per node per tree\r\n     * memory. If only the treeScope is provided, it will retrieve the value\r\n     * from the per tree memory. If no parameter is provided, this method will\r\n     * retrieve from the global memory. If only nodeScope is provided (but\r\n     * treeScope not), this method will still try to retrieve from the global\r\n     * memory.\r\n     *\r\n     * @method get\r\n     * @param key The key to be retrieved.\r\n     * @param treeScope The tree id if accessing the tree or node \r\n     *                           memory.\r\n     * @param nodeScope The node id if accessing the node memory.\r\n     * @return {Object} The value stored or undefined.\r\n     */\r\n    get(key: string, treeScope?: string, nodeScope?: string): any {\r\n        var memory = this._getMemory(treeScope, nodeScope);\r\n        return memory[key];\r\n    }\r\n}\r\n\r\n/**\r\n * The BaseNode class is used as super class to all nodes in BehaviorJS. It \r\n * comprises all common variables and methods that a node must have to \r\n * execute.\r\n *\r\n * **IMPORTANT:** Do not inherit from this class, use `b3.Composite`, \r\n * `b3.Decorator`, `b3.Action` or `b3.Condition`, instead.\r\n *\r\n * The attributes are specially designed to serialization of the node in a \r\n * JSON format. In special, the `parameters` attribute can be set into the \r\n * visual editor (thus, in the JSON file), and it will be used as parameter \r\n * on the node initialization at `BehaviorTree.load`.\r\n * \r\n * BaseNode also provide 5 callback methods, which the node implementations \r\n * can override. They are `enter`, `open`, `tick`, `close` and `exit`. See \r\n * their documentation to know more. These callbacks are called inside the \r\n * `_execute` method, which is called in the tree traversal.\r\n * \r\n * @module b3\r\n * @class BaseNode\r\n */\r\nexport class B3BaseNode {\r\n\r\n    /**\r\n     * Node ID.\r\n     * @readonly\r\n     */\r\n    id: string = null;\r\n\r\n    /**\r\n     * Node name. Must be a unique identifier, preferable the same name of the \r\n     * class. You have to set the node name in the prototype.\r\n     * @readonly\r\n     */\r\n    name: string = null;\r\n\r\n    /**\r\n     * Node category. Must be `b3.COMPOSITE`, `b3.DECORATOR`, `b3.ACTION` or \r\n     * `b3.CONDITION`. This is defined automatically be inheriting the \r\n     * correspondent class.\r\n     * @readonly\r\n     */\r\n    category: string = null;\r\n\r\n    /**\r\n     * Node title.\r\n     * @optional\r\n     * @readonly\r\n     */\r\n    title: string = null;\r\n\r\n    /**\r\n     * Node description.\r\n     * @optional\r\n     * @readonly\r\n     */\r\n    description: string = null;\r\n\r\n    /**\r\n     * A dictionary (key, value) describing the node parameters. Useful for \r\n     * defining parameter values in the visual editor. Note: this is only \r\n     * useful for nodes when loading trees from JSON files.\r\n     *\r\n     * **Deprecated since 0.2.0. This is too similar to the properties \r\n     * attribute, thus, this attribute is deprecated in favor to \r\n     * `properties`.**\r\n     *\r\n     * @deprecated since 0.2.0.\r\n     * @readonly\r\n     */\r\n    parameters: any = null;\r\n\r\n    /**\r\n     * A dictionary (key, value) describing the node properties. Useful for \r\n     * defining custom variables inside the visual editor.\r\n     *\r\n     * @type {Object}\r\n     * @readonly\r\n     */\r\n    properties: Record<string, any> = null;\r\n\r\n    /**\r\n     * 子节点，仅用于DECORATOR\r\n     */\r\n    child: any;\r\n\r\n    /**\r\n     * 子节点，仅用于COMPOSITE\r\n     */\r\n    children: any[];\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        this.id = b3.createUUID();\r\n        this.title = this.title || this.name;\r\n        this.description = \"\";\r\n        this.parameters = {};\r\n        this.properties = {};\r\n    }\r\n\r\n    /**\r\n     * This is the main method to propagate the tick signal to this node. This \r\n     * method calls all callbacks: `enter`, `open`, `tick`, `close`, and \r\n     * `exit`. It only opens a node if it is not already open. In the same \r\n     * way, this method only close a node if the node  returned a status \r\n     * different of `b3.RUNNING`.\r\n     *\r\n     * @method _execute\r\n     * @param tick A tick instance.\r\n     * @return {Constant} The tick state.\r\n     * @protected\r\n     */\r\n    _execute(tick: B3Tick): B3State {\r\n        // ENTER \r\n        this._enter(tick);\r\n\r\n        // OPEN \r\n        if (!tick.blackboard.get(\"isOpen\", tick.tree.id, this.id)) {\r\n            this._open(tick);\r\n        }\r\n\r\n        // TICK \r\n        var status = this._tick(tick);\r\n\r\n        // CLOSE \r\n        if (status !== b3.RUNNING) {\r\n            this._close(tick);\r\n        }\r\n\r\n        // EXIT \r\n        this._exit(tick);\r\n\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Wrapper for enter method.\r\n     * @method _enter\r\n     * @param tick A tick instance.\r\n     * @protected\r\n     */\r\n    _enter(tick: B3Tick): void {\r\n        tick._enterNode(this);\r\n        this.enter(tick);\r\n    }\r\n\r\n    /**\r\n     * Wrapper for open method.\r\n     * @method _open\r\n     * @param tick A tick instance.\r\n     * @protected\r\n     */\r\n    _open(tick: B3Tick): void {\r\n        tick._openNode(this);\r\n        tick.blackboard.set(\"isOpen\", true, tick.tree.id, this.id);\r\n        this.open(tick);\r\n    }\r\n\r\n    /**\r\n     * Wrapper for tick method.\r\n     * @method _tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     * @protected\r\n     */\r\n    _tick(tick: B3Tick): B3State {\r\n        tick._tickNode(this);\r\n        return this.tick(tick);\r\n    }\r\n\r\n    /**\r\n     * Wrapper for close method.\r\n     * @method _close\r\n     * @param tick A tick instance.\r\n     * @protected\r\n     */\r\n    _close(tick: B3Tick): void {\r\n        tick._closeNode(this);\r\n        tick.blackboard.set(\"isOpen\", false, tick.tree.id, this.id);\r\n        this.close(tick);\r\n    }\r\n\r\n    /**\r\n     * Wrapper for exit method.\r\n     * @method _exit\r\n     * @param tick A tick instance.\r\n     * @protected\r\n     */\r\n    _exit(tick: B3Tick): void {\r\n        tick._exitNode(this);\r\n        this.exit(tick);\r\n    }\r\n\r\n    /**\r\n     * Enter method, override this to use. It is called every time a node is \r\n     * asked to execute, before the tick itself.\r\n     *\r\n     * @virtual\r\n     * @method enter\r\n     * @param tick A tick instance.\r\n     */\r\n    enter(tick: B3Tick): void { }\r\n\r\n    /**\r\n     * Open method, override this to use. It is called only before the tick \r\n     * callback and only if the not isn\"t closed.\r\n     *\r\n     * Note: a node will be closed if it returned `b3.RUNNING` in the tick.\r\n     *\r\n     * @virtual\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void { }\r\n\r\n    /**\r\n     * Tick method, override this to use. This method must contain the real \r\n     * execution of node (perform a task, call children, etc.). It is called\r\n     * every time a node is asked to execute.\r\n     *\r\n     * @virtual\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     */\r\n    tick(tick: B3Tick): B3State { return b3.SUCCESS; }\r\n\r\n    /**\r\n     * Close method, override this to use. This method is called after the tick\r\n     * callback, and only if the tick return a state different from \r\n     * `b3.RUNNING`.\r\n     *\r\n     * @virtual\r\n     * @method close\r\n     * @param tick A tick instance.\r\n     */\r\n    close(tick: B3Tick): void { }\r\n\r\n    /**\r\n     * Exit method, override this to use. Called every time in the end of the \r\n     * execution.\r\n     *\r\n     * @virtual\r\n     * @method exit\r\n     * @param tick A tick instance.\r\n     */\r\n    exit(tick: B3Tick): void { }\r\n}\r\n\r\n/**\r\n * Action is the base class for all action nodes. Thus, if you want to create\r\n * new custom action nodes, you need to inherit from this class. For example,\r\n * take a look at the Runner action:\r\n * \r\n *     var Runner = b3.Class(b3.Action, {\r\n *       name: \"Runner\",\r\n *\r\n *       tick: function(tick) {\r\n *         return b3.RUNNING;\r\n *       }\r\n *     });\r\n *\r\n * @module b3\r\n * @class Action\r\n * @extends B3BaseNode\r\n */\r\nexport class B3Action extends B3BaseNode {\r\n\r\n    /**\r\n     * Node category. Default to `b3.ACTION`.\r\n     * @readonly\r\n     */\r\n    category = b3.ACTION;\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n    }\r\n}\r\n\r\n/**\r\n * Composite is the base class for all composite nodes. Thus, if you want to \r\n * create new custom composite nodes, you need to inherit from this class. \r\n * \r\n * When creating composite nodes, you will need to propagate the tick signal \r\n * to the children nodes manually. To do that, override the `tick` method and\r\n * call the `_execute` method on all nodes. For instance, take a look at how \r\n * the Sequence node inherit this class and how it call its children:\r\n *\r\n *     // Inherit from Composite, using the util function Class.\r\n *     var Sequence = b3.Class(b3.Composite, {\r\n *     \r\n *       // Remember to set the name of the node. \r\n *       name: \"Sequence\",\r\n *\r\n *       // Override the tick function\r\n *       tick: function(tick) {\r\n *       \r\n *         // Iterates over the children\r\n *         for (var i=0; i<this.children.length; i++) {\r\n *\r\n *           // Propagate the tick\r\n *           var status = this.children[i]._execute(tick);\r\n * \r\n *           if (status !== b3.SUCCESS) {\r\n *               return status;\r\n *           }\r\n *         }\r\n *\r\n *         return b3.SUCCESS;\r\n *       }\r\n *     });\r\n * \r\n * @module b3\r\n * @class Composite\r\n * @extends B3BaseNode\r\n */\r\nexport class B3Composite extends B3BaseNode {\r\n\r\n    /**\r\n     * Node category. Default to `b3.COMPOSITE`.\r\n     * @readonly\r\n     */\r\n    category = b3.COMPOSITE;\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n        this.children = (params.children || []).slice(0);\r\n    }\r\n}\r\n\r\n/**\r\n * Condition is the base class for all condition nodes. Thus, if you want to \r\n * create new custom condition nodes, you need to inherit from this class. \r\n *\r\n * @class Condition\r\n * @extends B3BaseNode\r\n */\r\nexport class B3Condition extends B3BaseNode {\r\n\r\n    /**\r\n     * Node category. Default to `b3.CONDITION`.\r\n     * @readonly\r\n     */\r\n    category = b3.CONDITION;\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Decorator is the base class for all decorator nodes. Thus, if you want to \r\n * create new custom decorator nodes, you need to inherit from this class. \r\n * \r\n * When creating decorator nodes, you will need to propagate the tick signal\r\n * to the child node manually, just like the composite nodes. To do that, \r\n * override the `tick` method and call the `_execute` method on the child \r\n * node. For instance, take a look at how the Inverter node inherit this \r\n * class and how it call its children:\r\n * \r\n *     // Inherit from Decorator, using the util function Class.\r\n *     var Inverter = b3.Class(b3.Decorator, {\r\n *       name: \"Inverter\",\r\n *\r\n *       tick: function(tick) {\r\n *         if (!this.child) {\r\n *           return b3.ERROR;\r\n *         }\r\n *     \r\n *         // Propagate the tick\r\n *         var status = this.child._execute(tick);\r\n *     \r\n *         if (status == b3.SUCCESS) {\r\n *           status = b3.FAILURE;\r\n *         } else if (status == b3.FAILURE) {\r\n *           status = b3.SUCCESS;\r\n *         }\r\n *     \r\n *         return status;\r\n *       }\r\n *     });\r\n *\r\n * @module b3\r\n * @class Decorator\r\n * @extends B3BaseNode\r\n */\r\nexport class B3Decorator extends B3BaseNode {\r\n\r\n    /**\r\n     * Node category. Default to b3.DECORATOR.\r\n     * @readonly\r\n     */\r\n    category = b3.DECORATOR;\r\n\r\n    /**\r\n     * Initialization method.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n        this.child = params.child || null;\r\n    }\r\n}\r\n\r\n/**\r\n * MemPriority is similar to Priority node, but when a child returns a \r\n * `RUNNING` state, its index is recorded and in the next tick the, \r\n * MemPriority calls the child recorded directly, without calling previous \r\n * children again.\r\n *\r\n * @module b3\r\n * @class MemPriority\r\n * @extends B3Composite\r\n */\r\nexport class B3MemPriority extends B3Composite {\r\n\r\n    /**\r\n     * Node name. Default to `MemPriority`.\r\n     * @readonly\r\n     */\r\n    name = \"MemPriority\";\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        tick.blackboard.set(\"runningChild\", 0, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        var child = tick.blackboard.get(\"runningChild\", tick.tree.id, this.id);\r\n        for (var i = child; i < this.children.length; i++) {\r\n            var status = this.children[i]._execute(tick);\r\n\r\n            if (status !== b3.FAILURE) {\r\n                if (status === b3.RUNNING) {\r\n                    tick.blackboard.set(\"runningChild\", i, tick.tree.id, this.id);\r\n                }\r\n\r\n                return status;\r\n            }\r\n        }\r\n\r\n        return b3.FAILURE;\r\n    }\r\n}\r\n\r\n/**\r\n * MemSequence is similar to Sequence node, but when a child returns a \r\n * `RUNNING` state, its index is recorded and in the next tick the \r\n * MemSequence call the child recorded directly, without calling previous \r\n * children again.\r\n *\r\n * @module b3\r\n * @class MemSequence\r\n * @extends B3Composite\r\n */\r\nexport class B3MemSequence extends B3Composite {\r\n\r\n    /**\r\n     * Node name. Default to `MemSequence`.\r\n     * @readonly\r\n     */\r\n    name = \"MemSequence\";\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick) {\r\n        tick.blackboard.set(\"runningChild\", 0, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        var child = tick.blackboard.get(\"runningChild\", tick.tree.id, this.id);\r\n        for (var i = child; i < this.children.length; i++) {\r\n            var status = this.children[i]._execute(tick);\r\n\r\n            if (status !== b3.SUCCESS) {\r\n                if (status === b3.RUNNING) {\r\n                    tick.blackboard.set(\"runningChild\", i, tick.tree.id, this.id);\r\n                }\r\n                return status;\r\n            }\r\n        }\r\n\r\n        return b3.SUCCESS;\r\n    }\r\n}\r\n\r\n/**\r\n * Priority ticks its children sequentially until one of them returns \r\n * `SUCCESS`, `RUNNING` or `ERROR`. If all children return the failure state,\r\n * the priority also returns `FAILURE`.\r\n *\r\n * @module b3\r\n * @class Priority\r\n * @extends B3Composite\r\n */\r\nexport class B3Priority extends B3Composite {\r\n\r\n    /**\r\n     * Node name. Default to `Priority`.\r\n     * @readonly\r\n     */\r\n    name = \"Priority\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            var status = this.children[i]._execute(tick);\r\n\r\n            if (status !== b3.FAILURE) {\r\n                return status;\r\n            }\r\n        }\r\n\r\n        return b3.FAILURE;\r\n    }\r\n}\r\n\r\n/**\r\n * The Sequence node ticks its children sequentially until one of them \r\n * returns `FAILURE`, `RUNNING` or `ERROR`. If all children return the \r\n * success state, the sequence also returns `SUCCESS`.\r\n *\r\n * @module b3\r\n * @class Sequence\r\n * @extends B3Composite\r\n */\r\nexport class B3Sequence extends B3Composite {\r\n\r\n    /**\r\n     * Node name. Default to `Sequence`.\r\n     * @readonly\r\n     */\r\n    name = \"Sequence\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            var status = this.children[i]._execute(tick);\r\n\r\n            if (status !== b3.SUCCESS) {\r\n                return status;\r\n            }\r\n        }\r\n\r\n        return b3.SUCCESS;\r\n    }\r\n}\r\n\r\n/**\r\n * The Inverter decorator inverts the result of the child, returning `SUCCESS`\r\n * for `FAILURE` and `FAILURE` for `SUCCESS`.\r\n *\r\n * @module b3\r\n * @class Inverter\r\n * @extends B3Decorator\r\n */\r\nexport class B3Inverter extends B3Decorator {\r\n\r\n    /**\r\n     * Node name. Default to `Inverter`.\r\n     * @readonly\r\n     */\r\n    name = \"Inverter\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        if (!this.child) {\r\n            return b3.ERROR;\r\n        }\r\n\r\n        var status = this.child._execute(tick);\r\n\r\n        if (status == b3.SUCCESS) {\r\n            status = b3.FAILURE;\r\n        } else if (status == b3.FAILURE) {\r\n            status = b3.SUCCESS;\r\n        }\r\n\r\n        return status;\r\n    }\r\n}\r\n\r\n/**\r\n * This decorator limit the number of times its child can be called. After a\r\n * certain number of times, the Limiter decorator returns `FAILURE` without \r\n * executing the child.\r\n *\r\n * @module b3\r\n * @class Limiter\r\n * @extends B3Decorator\r\n */\r\nexport class B3Limiter extends B3Decorator {\r\n\r\n    /**\r\n     * Node name. Default to `Limiter`.\r\n     * @readonly\r\n     */\r\n    name = \"Limiter\";\r\n\r\n    /**\r\n     * Node title. Default to `Limit X Activations`. Used in Editor.\r\n     * @readonly\r\n     */\r\n    title = \"Limit <maxLoop> Activations\";\r\n\r\n    /**\r\n     * Node parameters.\r\n     * @readonly\r\n     */\r\n    parameters = { \"maxLoop\": 1 };\r\n\r\n    maxLoop: number;\r\n\r\n    /**\r\n     * Initialization method. \r\n     *\r\n     * Settings parameters:\r\n     *\r\n     * - **maxLoop** (*Integer*) Maximum number of repetitions.\r\n     * - **child** (*BaseNode*) The child node.\r\n     *\r\n     * @method initialize\r\n     * @param params Object with parameters.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n\r\n        if (!params.maxLoop) {\r\n            throw \"maxLoop parameter in Limiter decorator is an obligatory \" +\r\n            \"parameter\";\r\n        }\r\n\r\n        this.maxLoop = params.maxLoop;\r\n    }\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        tick.blackboard.set(\"i\", 0, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        if (!this.child) {\r\n            return b3.ERROR;\r\n        }\r\n\r\n        var i = tick.blackboard.get(\"i\", tick.tree.id, this.id);\r\n\r\n        if (i < this.maxLoop) {\r\n            var status = this.child._execute(tick);\r\n\r\n            if (status == b3.SUCCESS || status == b3.FAILURE)\r\n                tick.blackboard.set(\"i\", i + 1, tick.tree.id, this.id);\r\n\r\n            return status;\r\n        }\r\n\r\n        return b3.FAILURE;\r\n    }\r\n}\r\n\r\n/**\r\n * The MaxTime decorator limits the maximum time the node child can execute. \r\n * Notice that it does not interrupt the execution itself (i.e., the child \r\n * must be non-preemptive), it only interrupts the node after a `RUNNING` \r\n * status.\r\n *\r\n * @module b3\r\n * @class MaxTime\r\n * @extends B3Decorator\r\n */\r\nexport class B3MaxTime extends B3Decorator {\r\n\r\n    /**\r\n     * Node name. Default to `MaxTime`.\r\n     * @readonly\r\n     */\r\n    name = \"MaxTime\";\r\n\r\n    /**\r\n     * Node title. Default to `Max XXms`. Used in Editor.\r\n     * @readonly\r\n     */\r\n    title = \"Max <maxTime>ms\";\r\n\r\n    /**\r\n     * Node parameters.\r\n     * @readonly\r\n     */\r\n    parameters = { \"maxTime\": 0 };\r\n\r\n    maxTime: number;\r\n\r\n    /**\r\n     * Initialization method.\r\n     *\r\n     * Settings parameters:\r\n     *\r\n     * - **maxTime** (*Integer*) Maximum time a child can execute.\r\n     * - **child** (*BaseNode*) The child node.\r\n     *\r\n     * @method initialize\r\n     * @param params Object with parameters.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n\r\n        if (!params.maxTime) {\r\n            throw \"maxTime parameter in MaxTime decorator is an obligatory \" +\r\n            \"parameter\";\r\n        }\r\n\r\n        this.maxTime = params.maxTime;\r\n    }\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        var startTime = (new Date()).getTime();\r\n        tick.blackboard.set(\"startTime\", startTime, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        if (!this.child) {\r\n            return b3.ERROR;\r\n        }\r\n\r\n        var currTime = (new Date()).getTime();\r\n        var startTime = tick.blackboard.get(\"startTime\", tick.tree.id, this.id);\r\n\r\n        var status = this.child._execute(tick);\r\n        if (currTime - startTime > this.maxTime) {\r\n            return b3.FAILURE;\r\n        }\r\n\r\n        return status;\r\n    }\r\n}\r\n\r\n/**\r\n * RepeatUntilFailure is a decorator that repeats the tick signal until the \r\n * node child returns `FAILURE`, `RUNNING` or `ERROR`. Optionally, a maximum \r\n * number of repetitions can be defined.\r\n *\r\n * @module b3\r\n * @class RepeatUntilFailure\r\n * @extends B3Decorator\r\n */\r\nexport class B3RepeatUntilFailure extends B3Decorator {\r\n\r\n    /**\r\n     * Node name. Default to `RepeatUntilFailure`.\r\n     * @readonly\r\n     */\r\n    name = \"RepeatUntilFailure\";\r\n\r\n    /**\r\n     * Node title. Default to `Repeat Until Failure`.\r\n     * @readonly\r\n     */\r\n    title = \"Repeat Until Failure\";\r\n\r\n    /**\r\n     * Node parameters.\r\n     * @readonly\r\n     */\r\n    parameters = { \"maxLoop\": -1 };\r\n\r\n    maxLoop: number;\r\n\r\n    /**\r\n     * Initialization method.\r\n     *\r\n     * Settings parameters:\r\n     *\r\n     * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 \r\n     *                           (infinite).\r\n     * - **child** (*BaseNode*) The child node.\r\n     *\r\n     * @method initialize\r\n     * @param params Object with parameters.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n        this.maxLoop = params.maxLoop || -1;\r\n    }\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        tick.blackboard.set(\"i\", 0, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        if (!this.child) {\r\n            return b3.ERROR;\r\n        }\r\n\r\n        var i = tick.blackboard.get(\"i\", tick.tree.id, this.id);\r\n        var status: B3State = b3.ERROR;\r\n\r\n        while (this.maxLoop < 0 || i < this.maxLoop) {\r\n            status = this.child._execute(tick);\r\n\r\n            if (status == b3.SUCCESS) {\r\n                i++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        i = tick.blackboard.set(\"i\", i, tick.tree.id, this.id);\r\n        return status;\r\n    }\r\n}\r\n\r\n/**\r\n * RepeatUntilSuccess is a decorator that repeats the tick signal until the \r\n * node child returns `SUCCESS`, `RUNNING` or `ERROR`. Optionally, a maximum \r\n * number of repetitions can be defined.\r\n *\r\n * @module b3\r\n * @class RepeatUntilSuccess\r\n * @extends B3Decorator\r\n */\r\nexport class B3RepeatUntilSuccess extends B3Decorator {\r\n\r\n    /**\r\n     * Node name. Default to `RepeatUntilSuccess`.\r\n     * @readonly\r\n     */\r\n    name = \"RepeatUntilSuccess\";\r\n\r\n    /**\r\n     * Node title. Default to `Repeat Until Success`.\r\n     * @readonly\r\n     */\r\n    title = \"Repeat Until Success\";\r\n\r\n    /**\r\n     * Node parameters.\r\n     * @readonly\r\n     */\r\n    parameters = { \"maxLoop\": -1 };\r\n\r\n    maxLoop: number;\r\n\r\n    /**\r\n     * Initialization method.\r\n     *\r\n     * Settings parameters:\r\n     *\r\n     * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 \r\n     *                           (infinite).\r\n     * - **child** (*BaseNode*) The child node.\r\n     *\r\n     * @method initialize\r\n     * @param params Object with parameters.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n        this.maxLoop = params.maxLoop || -1;\r\n    }\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        tick.blackboard.set(\"i\", 0, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        if (!this.child) {\r\n            return b3.ERROR;\r\n        }\r\n\r\n        var i = tick.blackboard.get(\"i\", tick.tree.id, this.id);\r\n        var status: B3State = b3.ERROR;\r\n\r\n        while (this.maxLoop < 0 || i < this.maxLoop) {\r\n            status = this.child._execute(tick);\r\n\r\n            if (status == b3.FAILURE) {\r\n                i++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        i = tick.blackboard.set(\"i\", i, tick.tree.id, this.id);\r\n        return status;\r\n    }\r\n}\r\n\r\n/**\r\n * Repeater is a decorator that repeats the tick signal until the child node \r\n * return `RUNNING` or `ERROR`. Optionally, a maximum number of repetitions \r\n * can be defined.\r\n *\r\n * @module b3\r\n * @class Repeater\r\n * @extends B3Decorator\r\n */\r\nexport class B3Repeater extends B3Decorator {\r\n\r\n    /**\r\n     * Node name. Default to `Repeater`.\r\n     * @readonly\r\n     */\r\n    name = \"Repeater\";\r\n\r\n    /**\r\n     * Node title. Default to `Repeat XXx`. Used in Editor.\r\n     * @readonly\r\n     */\r\n    title = \"Repeat <maxLoop>x\";\r\n\r\n    /**\r\n     * Node parameters.\r\n     * @readonly\r\n     */\r\n    parameters = { \"maxLoop\": -1 };\r\n\r\n    maxLoop: number;\r\n\r\n    /**\r\n     * Initialization method.\r\n     *\r\n     * Settings parameters:\r\n     *\r\n     * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 \r\n     *                           (infinite).\r\n     * - **child** (*BaseNode*) The child node.\r\n     * \r\n     * @method initialize\r\n     * @param params Object with parameters.\r\n     * @constructor\r\n     */\r\n    constructor(params: any) {\r\n        super(params);\r\n        this.maxLoop = params.maxLoop || -1;\r\n    }\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        tick.blackboard.set(\"i\", 0, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        if (!this.child) {\r\n            return b3.ERROR;\r\n        }\r\n\r\n        var i = tick.blackboard.get(\"i\", tick.tree.id, this.id);\r\n        var status: B3State = b3.SUCCESS;\r\n\r\n        while (this.maxLoop < 0 || i < this.maxLoop) {\r\n            status = this.child._execute(tick);\r\n\r\n            if (status == b3.SUCCESS || status == b3.FAILURE) {\r\n                i++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        tick.blackboard.set(\"i\", i, tick.tree.id, this.id);\r\n        return status;\r\n    }\r\n}\r\n\r\n/**\r\n * This action node returns `ERROR` always.\r\n *\r\n * @module b3\r\n * @class Error\r\n * @extends B3Action\r\n */\r\nexport class B3Error extends B3Action {\r\n\r\n    /**\r\n     * Node name. Default to `Error`.\r\n     * @readonly\r\n     */\r\n    name = \"Error\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} Always return `b3.ERROR`.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        return b3.ERROR;\r\n    }\r\n}\r\n\r\n/**\r\n * This action node returns `FAILURE` always.\r\n *\r\n * @module b3\r\n * @class Failer\r\n * @extends B3Action\r\n */\r\nexport class B3Failer extends B3Action {\r\n\r\n    /**\r\n     * Node name. Default to `Failer`.\r\n     * @readonly\r\n     */\r\n    name = \"Failer\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} Always return `b3.FAILURE`.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        return b3.FAILURE;\r\n    }\r\n}\r\n\r\n/**\r\n * This action node returns RUNNING always.\r\n *\r\n * @module b3\r\n * @class Runner\r\n * @extends B3Action\r\n */\r\nexport class B3Runner extends B3Action {\r\n\r\n    /**\r\n     * Node name. Default to `Runner`.\r\n     * @readonly\r\n     */\r\n    name = \"Runner\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} Always return `b3.RUNNING`.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        return b3.RUNNING;\r\n    }\r\n}\r\n\r\n/**\r\n * This action node returns `SUCCESS` always.\r\n *\r\n * @module b3\r\n * @class Succeeder\r\n * @extends B3Action\r\n */\r\nexport class B3Succeeder extends B3Action {\r\n\r\n    /**\r\n     * Node name. Default to `Succeeder`.\r\n     * @readonly\r\n     */\r\n    name = \"Succeeder\";\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} Always return `b3.SUCCESS`.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        return b3.SUCCESS;\r\n    }\r\n}\r\n\r\n/**\r\n * Wait a few seconds.\r\n *\r\n * @module b3\r\n * @class Wait\r\n * @extends B3Action\r\n */\r\nexport class B3Wait extends B3Action {\r\n\r\n    /**\r\n     * Node name. Default to `Wait`.\r\n     * @readonly\r\n     */\r\n    name = \"Wait\";\r\n\r\n    /**\r\n     * Node title. Default to `Wait XXms`. Used in Editor.\r\n     * @readonly\r\n     */\r\n    title = \"Wait <milliseconds>ms\";\r\n\r\n    /**\r\n     * Node parameters.\r\n     * @readonly\r\n     */\r\n    parameters = { \"milliseconds\": 0 };\r\n\r\n    endTime: number;\r\n\r\n    /**\r\n     * Initialization method.\r\n     *\r\n     * Settings parameters:\r\n     *\r\n     * - **milliseconds** (*Integer*) Maximum time, in milliseconds, a child\r\n     *                                can execute.\r\n     *\r\n     * @method initialize\r\n     * @param settings Object with parameters.\r\n     * @constructor\r\n     */\r\n    constructor(settings?: { milliseconds?: number; }) {\r\n        settings = settings || {};\r\n\r\n        super(settings);\r\n        this.endTime = settings.milliseconds || 0;\r\n    }\r\n\r\n    /**\r\n     * Open method.\r\n     * @method open\r\n     * @param tick A tick instance.\r\n     */\r\n    open(tick: B3Tick): void {\r\n        var startTime = (new Date()).getTime();\r\n        tick.blackboard.set(\"startTime\", startTime, tick.tree.id, this.id);\r\n    }\r\n\r\n    /**\r\n     * Tick method.\r\n     * @method tick\r\n     * @param tick A tick instance.\r\n     * @return {Constant} A state constant.\r\n     */\r\n    tick(tick: B3Tick): B3State {\r\n        var currTime = (new Date()).getTime();\r\n        var startTime = tick.blackboard.get(\"startTime\", tick.tree.id, this.id);\r\n\r\n        if (currTime - startTime > this.endTime) {\r\n            return b3.SUCCESS;\r\n        }\r\n\r\n        return b3.RUNNING;\r\n    }\r\n}\r\n\r\n/**\r\n * 行为树runtime\r\n * - https://github.com/behavior3/behavior3js\r\n */\r\nexport default class b3 {\r\n    public static readonly VERSION = \"0.2.0\";\r\n\r\n    // Returning status\r\n    public static readonly SUCCESS = B3State.SUCCESS;\r\n    public static readonly FAILURE = B3State.FAILURE;\r\n    public static readonly RUNNING = B3State.RUNNING;\r\n    public static readonly ERROR = B3State.ERROR;\r\n\r\n    // Node categories\r\n    public static readonly COMPOSITE = \"composite\";\r\n    public static readonly DECORATOR = \"decorator\";\r\n    public static readonly ACTION = \"action\";\r\n    public static readonly CONDITION = \"condition\";\r\n\r\n    public static readonly BehaviorTree = B3BehaviorTree;\r\n    public static readonly Tick = B3Tick;\r\n    public static readonly Blackboard = B3Blackboard;\r\n    public static readonly BaseNode = B3BaseNode;\r\n    public static readonly Action = B3Action;\r\n    public static readonly Composite = B3Composite;\r\n    public static readonly Condition = B3Condition;\r\n    public static readonly Decorator = B3Decorator;\r\n    public static readonly MemPriority = B3MemPriority;\r\n    public static readonly MemSequence = B3MemSequence;\r\n    public static readonly Priority = B3Priority;\r\n    public static readonly Sequence = B3Sequence;\r\n    public static readonly Inverter = B3Inverter;\r\n    public static readonly Limiter = B3Limiter;\r\n    public static readonly MaxTime = B3MaxTime;\r\n    public static readonly RepeatUntilFailure = B3RepeatUntilFailure;\r\n    public static readonly RepeatUntilSuccess = B3RepeatUntilSuccess;\r\n    public static readonly Repeater = B3Repeater;\r\n    public static readonly Error = B3Error;\r\n    public static readonly Failer = B3Failer;\r\n    public static readonly Runner = B3Runner;\r\n    public static readonly Succeeder = B3Succeeder;\r\n    public static readonly Wait = B3Wait;\r\n\r\n    /**\r\n     * This function is used to create unique IDs for trees and nodes.\r\n     * \r\n     * (consult http://www.ietf.org/rfc/rfc4122.txt).\r\n     *\r\n     * @class createUUID\r\n     * @return {String} A unique ID.\r\n     */\r\n    public static createUUID(): string {\r\n        var s = [];\r\n        var hexDigits = \"0123456789abcdef\";\r\n        for (var i = 0; i < 36; i++) {\r\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n        }\r\n        // bits 12-15 of the time_hi_and_version field to 0010\r\n        s[14] = \"4\";\r\n\r\n        // bits 6-7 of the clock_seq_hi_and_reserved to 01\r\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\r\n\r\n        s[8] = s[13] = s[18] = s[23] = \"-\";\r\n\r\n        var uuid = s.join(\"\");\r\n        return uuid;\r\n    }\r\n\r\n    /**\r\n     * Class is a meta-factory function to create classes in JavaScript. It is a\r\n     * shortcut for the CreateJS syntax style. By default, the class created by \r\n     * this function have an initialize function (the constructor). Optionally, \r\n     * you can specify the inheritance by passing another class as parameter.\r\n     * \r\n     * By default, all classes created using this function, may receive only a\r\n     * dictionary parameter as argument. This pattern is commonly used by jQuery \r\n     * and its plugins.\r\n     *\r\n     * Since 0.2.0, Class also receives a `properties` parameter, a dictionary\r\n     * which will be used to fill the new class prototype.\r\n     *\r\n     * Usage\r\n     * -----\r\n     *\r\n     *     // Creating a simple class\r\n     *     var BaseClass = b3.Class();\r\n     *\r\n     *     var ChildClass = b3.Class(BaseClass, {\r\n     *       // constructor\r\n     *       initialize(params) {\r\n     *       \r\n     *         // call super initialize\r\n     *         BaseClass.initialize.call(this, params);\r\n     *         ...\r\n     *       }\r\n     *     });\r\n     *\r\n     * @class Class\r\n     * @param {Object} baseClass The super class.\r\n     * @param {Object} properties A dictionary with attributes and methods.\r\n     * @return {Object} A new class.\r\n     */\r\n    public static Class(baseClass, properties?): (params: any) => void {\r\n        // create a new class\r\n        var cls = function (params) {\r\n            this.initialize(params || {});\r\n        };\r\n\r\n        // if base class is provided, inherit\r\n        if (baseClass) {\r\n            cls.prototype = Object.create(baseClass.prototype);\r\n            cls.prototype.constructor = cls;\r\n        }\r\n\r\n        // create initialize if does not exist on baseClass\r\n        if (!cls.prototype.initialize) {\r\n            cls.prototype.initialize = function () { };\r\n        }\r\n\r\n        // copy properties\r\n        if (properties) {\r\n            for (var key in properties) {\r\n                cls.prototype[key] = properties[key];\r\n            }\r\n        }\r\n\r\n        return cls;\r\n    }\r\n}\r\n"]}