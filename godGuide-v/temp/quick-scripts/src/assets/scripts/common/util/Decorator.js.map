{"version":3,"sources":["assets\\scripts\\common\\util\\Decorator.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Tool from \"./Tool\";\r\n\r\ntype AsyncData = [(value: unknown) => void, (reason?: unknown) => void, unknown[]];\r\n\r\n/** 异步成员方法 */\r\ninterface AsyncProperty extends PropertyDescriptor {\r\n    value?: (...args: unknown[]) => Promise<unknown>;\r\n}\r\n\r\n/**\r\n * 工具装饰器\r\n */\r\nexport default class Decorator {\r\n    //#region 方法装饰器\r\n\r\n    /**\r\n     * 异步方法装饰器，多次调用时会按队列顺序依次执行\r\n     * - 对于非静态成员，每一个对象实例都存在一个独立的队列\r\n     * - 对于静态成员，仅存在一个队列\r\n     */\r\n    public static queue(target: unknown, funcName: string, desc: AsyncProperty): void {\r\n        let old = desc.value;\r\n        let queueMap: Map<unknown, AsyncData[]> = new Map();\r\n        let queueRun = async function (): Promise<void> {\r\n            let queue = queueMap.get(this);\r\n            if (queue === undefined) {\r\n                cc.error(`[Decorator.queue] error: queue is undefined`);\r\n                return;\r\n            }\r\n            if (queue.length === 0) {\r\n                queueMap.delete(this);\r\n                return;\r\n            }\r\n            let data = queue[0];\r\n            let resolve = data[0];\r\n            let reject = data[1];\r\n            let args = data[2];\r\n            try {\r\n                let result = await old.apply(this, args);\r\n                resolve(result);\r\n            } catch (error) {\r\n                reject(error);\r\n            } finally {\r\n                queue.shift();\r\n                queueRun.apply(this);\r\n            }\r\n        };\r\n        desc.value = function (...args: unknown[]): Promise<unknown> {\r\n            return new Promise((resolve, reject) => {\r\n                let queue = queueMap.get(this);\r\n                if (queue === undefined) {\r\n                    queue = [];\r\n                    queueMap.set(this, queue);\r\n                }\r\n                queue.push([resolve, reject, args]);\r\n                if (queue.length === 1) {\r\n                    queueRun.apply(this);\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 方法装饰器，方法开始执行至执行完毕后锁定一段时间，期间忽略所有对该方法的调用\r\n     * - 忽略调用时不会有返回值\r\n     * @param seconds 锁定的秒数\r\n     */\r\n    public static lock(seconds: number = 0): (target: unknown, funcName: string, desc: PropertyDescriptor) => void {\r\n        return function (target: unknown, funcName: string, desc: PropertyDescriptor): void {\r\n            let old = desc.value;\r\n            let callingSet: Set<unknown> = new Set();\r\n            desc.value = function (...args: unknown[]): unknown {\r\n                if (callingSet.has(this)) {\r\n                    return;\r\n                }\r\n                callingSet.add(this);\r\n                let result = old.apply(this, args);\r\n                if (result instanceof Promise) {\r\n                    return new Promise((resolve, reject) => {\r\n                        result.then((value: unknown) => {\r\n                            Tool.wait(Math.max(seconds, 0)).then(() => { callingSet.delete(this); });\r\n                            resolve(value);\r\n                        }, (reason: unknown) => {\r\n                            Tool.wait(Math.max(seconds, 0)).then(() => { callingSet.delete(this); });\r\n                            reject(reason);\r\n                        });\r\n                    });\r\n                } else {\r\n                    Tool.wait(Math.max(seconds, 0)).then(() => { callingSet.delete(this); });\r\n                    return result;\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    //#endregion\r\n}\r\n"]}