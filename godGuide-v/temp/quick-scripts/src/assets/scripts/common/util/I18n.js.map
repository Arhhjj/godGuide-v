{"version":3,"sources":["assets\\scripts\\common\\util\\I18n.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import En from \"../config/En\";\r\nimport Zh from \"../config/Zh\";\r\nimport { EventName } from \"../const/EventName\";\r\nimport Events from \"./Events\";\r\nimport Tool from \"./Tool\";\r\n\r\n/**\r\n * 语言类型\r\n */\r\nexport enum LangType {\r\n    NONE = \"\",\r\n    ZH = \"zh\",\r\n    EN = \"en\"\r\n}\r\n\r\n/**\r\n * 多语言控制类\r\n */\r\nexport default class I18n {\r\n    private static _init: boolean = false;\r\n\r\n    /** 语言表 */\r\n    private static _phrases: any = null;\r\n\r\n    private static _curLang: LangType = LangType.NONE;\r\n    /* 当前语言类型 */\r\n    public static get curLang(): LangType { return this._curLang; }\r\n\r\n    /**\r\n     * 初始化语言\r\n     * @param language\r\n     */\r\n    public static init(language: LangType = LangType.NONE): void {\r\n        if (this._init) {\r\n            return;\r\n        }\r\n        this._init = true;\r\n        let lang = language || cc.sys.language;\r\n        this.switch(lang as LangType);\r\n    }\r\n\r\n    /**\r\n     * 切换语言\r\n     * @param language\r\n     */\r\n    public static switch(language: LangType): void {\r\n        if (this._curLang === language) {\r\n            return;\r\n        }\r\n\r\n        this._curLang = language;\r\n        switch (language) {\r\n            case LangType.ZH:\r\n                this._phrases = Zh;\r\n                break;\r\n            case LangType.EN:\r\n                this._phrases = En;\r\n                break;\r\n            default:\r\n                this._curLang = LangType.EN;\r\n                this._phrases = En;\r\n                break;\r\n        }\r\n        this.updateLocalizedCmpt();\r\n    }\r\n\r\n    /**\r\n    * 更新所有多语言组件\r\n    */\r\n    public static updateLocalizedCmpt(): void {\r\n        Events.emit(EventName.UPDATE_LOCALIZED_CMPT);\r\n    }\r\n\r\n\r\n    /**\r\n     * 通过语言表value获取对应的key\r\n     * @param value 语言表的value\r\n     */\r\n    public static getKeyByValue(value: string): string {\r\n        if (!this._phrases) {\r\n            cc.error(`[I18n.getKeyByValue] 未正确初始化`);\r\n            return \"\";\r\n        }\r\n        for (let key in this._phrases) {\r\n            if (this._phrases[key] === value) {\r\n                return key;\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * 通过key获取语言表中的字符串\r\n     * @param key 语言表中的key\r\n     * @param option 用于替换的数据，可以传键值对，也可以按顺序传参\r\n     * @example\r\n     * // 语言表 {\"test\": \"test %{arg1} %{arg2} !!!\"}\r\n     * I18n.getText(\"test\", {arg1: \"somthing\", arg2: 2}); // \"test somthing 2 !!!\"\r\n     * I18n.getText(\"test\", \"somthing\", 2); // \"test somthing 2 !!!\"\r\n     */\r\n    public static getText(key: string, ...option: [Record<string, string | number>] | Array<string | number>): string {\r\n        if (!this._phrases) {\r\n            cc.error(`[I18n.getText] 未正确初始化`);\r\n            return \"\";\r\n        }\r\n        if (!key) {\r\n            return \"\";\r\n        }\r\n\r\n        let text: string = this._phrases.hasOwnProperty(key) ? this._phrases[key] : key;\r\n        text = Tool.formatString(text, ...option);\r\n        return text;\r\n    }\r\n}\r\n"]}