{"version":3,"sources":["assets\\scripts\\common\\cmpt\\ui\\multiTexture\\MultiTextureManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MultiSprite from \"./MultiSprite\";\r\n\r\n/**\r\n * Multi-Texture 管理器\r\n */\r\nexport class MultiTextureManager {\r\n    /** 纹理最大数量 */\r\n    public static readonly MAX_TEXTURE_NUM = 8;\r\n\r\n    private static _init: boolean = false;\r\n    /** 共享材质 */\r\n    private static _mat: cc.Material = null;\r\n    private static _texMap: Map<number, cc.Texture2D> = new Map();\r\n    private static _sprites: Set<MultiSprite> = new Set();\r\n\r\n    /**\r\n     * 初始化纹理管理器\r\n     */\r\n    public static init(mat: cc.Material): void {\r\n        if (this._init || !(mat instanceof cc.Material) || mat instanceof cc.MaterialVariant) {\r\n            return;\r\n        }\r\n        this._init = true;\r\n        this._mat = mat;\r\n        // 处理引用计数\r\n        this._mat.addRef();\r\n    }\r\n\r\n    public static addSprite(sp: MultiSprite): void {\r\n        this._sprites.add(sp);\r\n    }\r\n\r\n    public static removeSprite(sp: MultiSprite): void {\r\n        this._sprites.delete(sp);\r\n    }\r\n\r\n    /**\r\n     * 设置合批纹理\r\n     * @param idx 纹理id\r\n     * @param tex 纹理对象\r\n     * @returns \r\n     */\r\n    public static setTexture(idx: number, tex: cc.Texture2D): void {\r\n        if (!this._init) {\r\n            cc.error(\"[MultiSpriteManager.setTexture] 未初始化MultiSpriteManager\");\r\n            return;\r\n        }\r\n\r\n        if (!(tex instanceof cc.Texture2D)) {\r\n            cc.error(\"[MultiSpriteManager.setTexture] 参数类型错误\");\r\n            return;\r\n        }\r\n\r\n        idx = cc.misc.clampf(idx, 0, MultiTextureManager.MAX_TEXTURE_NUM - 1);\r\n        let oldTex = this._texMap.get(idx);\r\n        if (oldTex === tex) {\r\n            return;\r\n        }\r\n\r\n        // 处理引用计数\r\n        if (oldTex) {\r\n            oldTex.decRef();\r\n        }\r\n        tex.addRef();\r\n\r\n        this._texMap.set(idx, tex);\r\n        // 修改共享材质属性\r\n        this._mat.setProperty(`texture${idx}`, tex);\r\n        // 修改已存在的渲染组件上材质变体的属性，同时更新渲染组件textureIdx\r\n        this._sprites.forEach((v) => {\r\n            /**\r\n             * @bug\r\n             * 2.4.5之前材质hash计算在utils.js中serializeUniforms有bug, 里面for-in遍历材质属性顺序受k-v对插入顺序影响(即setProperty顺序), 即使属性完全一致, hash却不一定一致\r\n             * 因此在此直接创建新的材质\r\n             */\r\n            // v.setMaterial(0, this._mat);\r\n\r\n            // 材质变体中的属性必须完全一致, 材质的hash值计算才会一致\r\n            let material = v.getMaterial(0);\r\n            for (let i = 0; i < MultiTextureManager.MAX_TEXTURE_NUM; i++) {\r\n                let texture = this._texMap.get(i);\r\n                if (!texture) {\r\n                    continue;\r\n                }\r\n                let textureImpl = texture.getImpl();\r\n                if (material.getProperty(`texture${i}`, 0) !== textureImpl) {\r\n                    material.setProperty(`texture${i}`, texture);\r\n                }\r\n            }\r\n            // 修改共享材质属性后，必须手动设置材质变体的_effect._dirty，不然不会重新计算材质变体的hash值\r\n            material[\"_effect\"]._dirty = true;\r\n\r\n            // 更新textureIdx与材质属性\r\n            v._updateMaterial();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 根据纹理获取对应的textureIdx\r\n     * @param tex \r\n     * @returns \r\n     */\r\n    public static getIdx(tex: cc.Texture2D): number {\r\n        if (!this._init) {\r\n            cc.error(\"[MultiSpriteManager.getIdx] 未初始化MultiSpriteManager\");\r\n            return;\r\n        }\r\n        \r\n        for (let i = 0; i < MultiTextureManager.MAX_TEXTURE_NUM; i++) {\r\n            if (this._texMap.get(i) === tex || this._mat.getProperty(`texture${i}`, 0) === tex.getImpl()) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n"]}