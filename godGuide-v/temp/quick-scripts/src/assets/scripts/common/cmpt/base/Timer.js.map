{"version":3,"sources":["assets\\scripts\\common\\cmpt\\base\\Timer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EventName } from \"../../const/EventName\";\r\nimport Events from \"../../util/Events\";\r\nimport { SCALE_TWEEN, TWEEN } from \"../../util/Tween\";\r\n\r\nconst { ccclass, executionOrder, menu, disallowMultiple } = cc._decorator;\r\n\r\nif (!CC_EDITOR) {\r\n    cc.director.on(cc.Director.EVENT_AFTER_SCENE_LAUNCH, (scene: cc.Scene) => {\r\n        if (Timer.timer) {\r\n            return;\r\n        }\r\n\r\n        cc.log(\"addPersistRootNode: TIMER\");\r\n        let node = new cc.Node(\"TIMER\");\r\n        cc.game.addPersistRootNode(node);\r\n        node.addComponent(Timer);\r\n    });\r\n}\r\n\r\n/**\r\n * - 全局时间管理器，场景加载后会自动绑定常驻节点，保证全局有且只有一个\r\n * - 负责TWEEN和SCALE_TWEEN的管理与更新\r\n */\r\n@ccclass\r\n@disallowMultiple\r\n@executionOrder(-1000)\r\n@menu(\"Framework/基础组件/Timer\")\r\nexport default class Timer extends cc.Component {\r\n    //#region 静态成员\r\n\r\n    /** 全局第一个加载的Timer组件 */\r\n    private static _timer: Timer = null;\r\n    public static get timer(): Timer {\r\n        return this._timer;\r\n    }\r\n\r\n    /** 游戏调用暂停的计数 */\r\n    private static _puaseCount: number = 0;\r\n\r\n    private static _lastTimeScale: number = 1;\r\n    private static _timeScale: number = 1;\r\n    /** \r\n     * dt缩放倍数，1为正常速度，0为暂停\r\n     * - 需要特别注意此值的修改和暂停、恢复如果同时多处调用产生的效果是否正确\r\n     */\r\n    public static get timeScale(): number { return this._timeScale; }\r\n    public static set timeScale(v: number) {\r\n        if (v === this._timeScale || v < 0) {\r\n            return;\r\n        }\r\n        this._timeScale = v;\r\n        Events.emit(EventName.TIME_SCALE);\r\n    }\r\n\r\n    private static _realDt: number = 0;\r\n    /** 距上一帧间隔的真实时间 */\r\n    public static get realDt(): number { return this._realDt; }\r\n    /** 距上一帧间隔经过timeScale缩放的时间 */\r\n    public static get scaleDt(): number { return this._realDt * this._timeScale; }\r\n\r\n    private static _gameSec: number = 0;\r\n    private static _scaleGameSec: number = 0;\r\n    /** 游戏启动经过的时长 s */\r\n    public static get gameSec(): number { return this._gameSec; }\r\n    /** 游戏启动经过的时长 ms */\r\n    public static get gameMs(): number { return this._gameSec * 1000; }\r\n    /** 游戏经过缩放的时长 s */\r\n    public static get scaleGameSec(): number { return this._scaleGameSec; }\r\n    /** 游戏经过缩放的时长 ms */\r\n    public static get scaleGameMs(): number { return this._scaleGameSec * 1000; }\r\n\r\n    /**\r\n     * 重置 timeScale\r\n     */\r\n    public static reset(): void {\r\n        this._puaseCount = 0;\r\n        this._timeScale = 1;\r\n        this._lastTimeScale = 1;\r\n    }\r\n\r\n    /**\r\n     * 暂停游戏 timeScale设置为0 （需要与gameResume成对调用）\r\n     */\r\n    public static gamePause(): void {\r\n        this._puaseCount++;\r\n        if (this._puaseCount > 1) {\r\n            return;\r\n        }\r\n        this._lastTimeScale = this._timeScale;\r\n        this._timeScale = 0;\r\n        Events.emit(EventName.GAME_PAUSE);\r\n    }\r\n\r\n    /**\r\n     * 恢复游戏 （需要与gamePause成对调用）\r\n     */\r\n    public static gameResume(): void {\r\n        if (this._puaseCount <= 0) {\r\n            return;\r\n        }\r\n        this._puaseCount--;\r\n        if (this._puaseCount <= 0) {\r\n            this._timeScale = this._lastTimeScale;\r\n            Events.emit(EventName.GAME_RESUME);\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    protected onLoad(): void {\r\n        if (Timer._timer) {\r\n            return;\r\n        }\r\n        Timer._timer = this;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (Timer._timer === this) {\r\n            Timer._timer = null;\r\n        }\r\n\r\n        TWEEN.removeAll();\r\n        SCALE_TWEEN.removeAll();\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        // 只启用第一个加载的组件\r\n        if (Timer._timer !== this) {\r\n            return;\r\n        }\r\n\r\n        Timer._realDt = dt;\r\n        Timer._gameSec += dt;\r\n        Timer._scaleGameSec += Timer.scaleDt;\r\n\r\n        TWEEN.update(Timer.gameMs);\r\n        // scaleDt大于0时更新SCALE_TWEEN\r\n        if (Timer.scaleDt > 0) {\r\n            SCALE_TWEEN.update(Timer.scaleGameMs);\r\n        }\r\n    }\r\n}\r\n"]}