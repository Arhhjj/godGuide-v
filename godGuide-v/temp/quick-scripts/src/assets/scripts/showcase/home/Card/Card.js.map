{"version":3,"sources":["assets\\scripts\\showcase\\home\\Card\\Card.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ResSprite from \"../../../common/cmpt/ui/res/ResSprite\";\r\nimport { EventName } from \"../../../common/const/EventName\";\r\nimport { DirUrl } from \"../../../common/const/Url\";\r\nimport GlobalInfo from \"../../../common/runtime/GlobalInfo\";\r\nimport Events from \"../../../common/util/Events\";\r\nimport Tool from \"../../../common/util/Tool\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Card extends cc.Component {\r\n    private minX: number = -375; // X 轴最小移动范围\r\n    private maxX: number = 375; // X 轴最大移动范围\r\n    private minY: number = -400; // Y 轴最小移动范围\r\n    private maxY: number = 255; // Y 轴最大移动范围\r\n\r\n    private isMoving: boolean = false;\r\n    public isLoop: boolean = true\r\n    public random: number = null\r\n\r\n    public canMove: boolean = true;\r\n    private moveInterval: number = 2.5; // 移动的间隔时间，单位秒\r\n\r\n    async initSpriteFrame(): Promise<number> {\r\n        const random = Tool.randInt(1, 4)\r\n        const url = DirUrl.TEXTURE + `home/card${random}`\r\n        const resSprite = this.getComponent(ResSprite) || this.addComponent(ResSprite)\r\n        await resSprite.setSpriteFrame(url)\r\n\r\n        this.random = random\r\n        return random\r\n    }\r\n\r\n    async init() {\r\n        await this.moveNodeAsync();\r\n    }\r\n\r\n    private getRandomPosition(): cc.Vec3 {\r\n        return new cc.Vec3(\r\n            Tool.randInt(this.minX, this.maxX),\r\n            Tool.randInt(this.minY, this.maxY),\r\n            0\r\n        );\r\n    }\r\n\r\n    private async moveNodeAsync() {\r\n        if (!this.canMove) {\r\n            return;\r\n        }\r\n\r\n        this.isMoving = true;\r\n\r\n        const node = this.node;\r\n        const currentPos = node.position;\r\n        const targetPos = this.getRandomPosition();\r\n        const distance = currentPos.sub(targetPos).mag();\r\n\r\n        const duration = distance * 0.01;\r\n        // console.log(duration);\r\n\r\n        // 创建 Tween 动画对象\r\n        const tween = new cc.Tween(this.node);\r\n\r\n        // 缓动到目标位置\r\n        tween.to(duration, { position: targetPos });\r\n\r\n        // 设置缓动完成后的回调函数\r\n        tween.call(async () => {\r\n            this.isMoving = false;\r\n            // 移动结束后设置 canMove 为 true\r\n            this.canMove = true;\r\n\r\n            await Tool.waitCmpt(this, this.moveInterval);\r\n            // 在移动完成后调用下一次移动\r\n            this.moveNodeAsync();\r\n        });\r\n\r\n        // 开始执行动画\r\n        tween.start();\r\n\r\n        // 设置 canMove 为 false，阻止在移动过程中重复触发移动\r\n        this.canMove = false;\r\n    }\r\n\r\n    onCollisionEnter(other, self) {\r\n        if (!GlobalInfo.ON_COLLISION_ENTER) return\r\n        GlobalInfo.ON_COLLISION_ENTER = false\r\n\r\n        // 两个节点开始接触时触发\r\n        console.log('Nodes started colliding');\r\n        Events.emit(EventName.JUDG_CARD, this, this.node)\r\n    }\r\n\r\n}\r\n"]}