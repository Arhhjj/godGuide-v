{"version":3,"sources":["assets\\scripts\\animator\\AnimatorAnimation.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import AnimatorBase, { AnimationPlayer } from \"./core/AnimatorBase\";\r\nimport AnimatorStateLogic from \"./core/AnimatorStateLogic\";\r\n\r\nconst { ccclass, property, requireComponent, disallowMultiple, menu } = cc._decorator;\r\n\r\n/** \r\n * Cocos Animation状态机组件\r\n */\r\n@ccclass\r\n@disallowMultiple\r\n@requireComponent(cc.Animation)\r\n@menu('Framework/Animator/AnimatorAnimation')\r\nexport default class AnimatorAnimation extends AnimatorBase {\r\n    /** Animation组件 */\r\n    private _animation: cc.Animation = null;\r\n    /** 当前的动画实例 */\r\n    private _animState: cc.AnimationState = null;\r\n    /** 记录初始的wrapmode */\r\n    private _wrapModeMap: Map<cc.AnimationState, cc.WrapMode> = new Map();\r\n\r\n    protected start() {\r\n        if (!this.playOnStart || this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this._animation = this.getComponent(cc.Animation);\r\n        this._animation.on(cc.Animation.EventType.FINISHED, this.onAnimFinished, this);\r\n        this._animation.on(cc.Animation.EventType.LASTFRAME, this.onAnimFinished, this);\r\n\r\n        if (this.assetRawUrl !== null) {\r\n            this.initJson(this.assetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 手动初始化状态机，可传入0-3个参数，类型如下\r\n     * - onStateChangeCall 状态切换时的回调\r\n     * - stateLogicMap 各个状态逻辑控制\r\n     * - animationPlayer 自定义动画控制\r\n     * @override\r\n     */\r\n    public onInit(...args: Array<Map<string, AnimatorStateLogic> | ((fromState: string, toState: string) => void) | AnimationPlayer>) {\r\n        if (this.playOnStart || this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this.initArgs(...args);\r\n\r\n        this._animation = this.getComponent(cc.Animation);\r\n        this._animation.on(cc.Animation.EventType.FINISHED, this.onAnimFinished, this);\r\n        this._animation.on(cc.Animation.EventType.LASTFRAME, this.onAnimFinished, this);\r\n\r\n        if (this.assetRawUrl !== null) {\r\n            this.initJson(this.assetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     * @override\r\n     * @param animName 动画名\r\n     * @param loop 是否循环播放\r\n     */\r\n    protected playAnimation(animName: string, loop: boolean) {\r\n        if (!animName) {\r\n            return;\r\n        }\r\n\r\n        this._animState = this._animation.play(animName);\r\n        if (!this._animState) {\r\n            return;\r\n        }\r\n        if (!this._wrapModeMap.has(this._animState)) {\r\n            this._wrapModeMap.set(this._animState, this._animState.wrapMode);\r\n        }\r\n        this._animState.wrapMode = loop ? cc.WrapMode.Loop : this._wrapModeMap.get(this._animState);\r\n    }\r\n\r\n    /**\r\n     * 缩放动画播放速率\r\n     * @override\r\n     * @param scale 缩放倍率\r\n     */\r\n    protected scaleTime(scale: number) {\r\n        if (this._animState) {\r\n            this._animState.speed = scale;\r\n        }\r\n    }\r\n}\r\n"]}