{"version":3,"sources":["assets\\scripts\\animator\\core\\AnimatorController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import AnimatorBase from \"./AnimatorBase\";\r\nimport AnimatorParams from \"./AnimatorParams\";\r\nimport AnimatorState from \"./AnimatorState\";\r\n\r\n/**\r\n * 状态机控制类\r\n */\r\nexport default class AnimatorController {\r\n    private _jsonData: any = null;\r\n    private _animator: AnimatorBase = null;\r\n\r\n    private _params: AnimatorParams = null;\r\n    private _states: Map<string, AnimatorState> = null;\r\n    private _anyState: AnimatorState = null;\r\n    private _curState: AnimatorState = null;\r\n\r\n    /** 状态切换次数 */\r\n    private _changeCount: number = 0;\r\n    /** 对应animComplete的状态 */\r\n    public animCompleteState: AnimatorState = null;\r\n    /** 动画播放完毕的标记 */\r\n    public animComplete: boolean = false;\r\n    /** 当前运行的状态 */\r\n    public get curState(): AnimatorState { return this._curState; }\r\n    public get params(): AnimatorParams { return this._params; }\r\n\r\n    constructor(player: AnimatorBase, json: any) {\r\n        this._animator = player;\r\n        this._jsonData = json;\r\n        this._states = new Map<string, AnimatorState>();\r\n        this._params = new AnimatorParams(json.parameters);\r\n        this.init(json);\r\n    }\r\n\r\n    /**\r\n     * 初始化状态机所有动画状态\r\n     */\r\n    private init(json: any) {\r\n        if (json.states.length <= 0) {\r\n            cc.error(`[AnimatorController.init] 状态机json错误`);\r\n            return;\r\n        }\r\n\r\n        this._anyState = new AnimatorState(json.anyState, this);\r\n        for (let i = 0; i < json.states.length; i++) {\r\n            let state: AnimatorState = new AnimatorState(json.states[i], this);\r\n            this._states.set(state.name, state);\r\n        }\r\n    }\r\n\r\n    private updateState() {\r\n        this._curState.checkAndTrans();\r\n        if (this._curState !== this._anyState && this._anyState !== null) {\r\n            this._anyState.checkAndTrans();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新状态机逻辑\r\n     */\r\n    public updateAnimator() {\r\n        // 重置计数\r\n        this._changeCount = 0;\r\n\r\n        this.updateState();\r\n\r\n        // 重置动画完成标记\r\n        if (this.animComplete && this.animCompleteState.loop) {\r\n            this.animComplete = false;\r\n        }\r\n        // 重置autoTrigger\r\n        this.params.resetAllAutoTrigger();\r\n    }\r\n\r\n    public onAnimationComplete() {\r\n        this.animComplete = true;\r\n        this.animCompleteState = this._curState;\r\n        // cc.log(`animation complete: ${this._curState.name}`);\r\n    }\r\n\r\n    /**\r\n     * 无视条件直接跳转状态，如果当前已处于此状态则重置状态\r\n     * @param 状态名\r\n     */\r\n    public play(stateName: string) {\r\n        if (!this._states.has(stateName)) {\r\n            return;\r\n        }\r\n\r\n        // 重置动画完成标记\r\n        this.animComplete = false;\r\n        let oldState = this._curState;\r\n        this._curState = this._states.get(stateName);\r\n        this._animator.onStateChange(oldState, this._curState);\r\n        this.updateState();\r\n    }\r\n\r\n    /**\r\n     * 切换动画状态\r\n     */\r\n    public changeState(stateName: string) {\r\n        this._changeCount++;\r\n        if (this._changeCount > 1000) {\r\n            cc.error('[AnimatorController.changeState] error: 状态切换递归调用超过1000次，transition设置可能出错!');\r\n            return;\r\n        }\r\n\r\n        if (this._states.has(stateName) && (this._curState === null || this._curState.name !== stateName)) {\r\n            let oldState = this._curState;\r\n            this._curState = this._states.get(stateName);\r\n\r\n            this._animator.onStateChange(oldState, this._curState);\r\n\r\n            this.updateState();\r\n        } else {\r\n            cc.error(`[AnimatorController.changeState] error state: ${stateName}`);\r\n        }\r\n    }\r\n}\r\n"]}