{"version":3,"sources":["assets\\scripts\\animator\\core\\AnimatorState.ts"],"names":[],"mappings":";;;;;;AACA,2DAAsD;AAEtD;;GAEG;AACH;IAqBI,uBAAY,IAAS,EAAE,EAAsB;QApBrC,UAAK,GAAW,EAAE,CAAC;QACnB,YAAO,GAAW,EAAE,CAAC;QACrB,UAAK,GAAY,KAAK,CAAC;QACvB,WAAM,GAAW,CAAC,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QAEpB,iBAAY,GAAyB,EAAE,CAAC;QACxC,QAAG,GAAuB,IAAI,CAAC;QAcnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;QAEpC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,UAAU,GAAuB,IAAI,4BAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACrF,UAAU,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC9D;IACL,CAAC;IAvBD,sBAAW,+BAAI;QADf,UAAU;aACV,cAAoB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAExC,sBAAW,iCAAM;QADjB,UAAU;aACV,cAAsB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAE5C,sBAAW,+BAAI;QADf,eAAe;aACf,cAAoB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAExC,sBAAW,gCAAK;QADhB,aAAa;aACb,cAAqB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAE1C,sBAAW,gCAAK;QADhB,kBAAkB;aAClB,cAAqB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAiB1C;;OAEG;IACI,qCAAa,GAApB;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,UAAU,GAAuB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,EAAE,EAAE;gBAClC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACrB,OAAO;aACV;SACJ;IACL,CAAC;IACL,oBAAC;AAAD,CAhDA,AAgDC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import AnimatorController from \"./AnimatorController\";\r\nimport AnimatorTransition from \"./AnimatorTransition\";\r\n\r\n/**\r\n * 状态管理类\r\n */\r\nexport default class AnimatorState {\r\n    private _name: string = \"\";\r\n    private _motion: string = \"\";\r\n    private _loop: boolean = false;\r\n    private _speed: number = 1;\r\n    private _multi: string = \"\";\r\n\r\n    private _transitions: AnimatorTransition[] = [];\r\n    private _ac: AnimatorController = null;\r\n\r\n    /** 状态名 */\r\n    public get name() { return this._name; }\r\n    /** 动画名 */\r\n    public get motion() { return this._motion; }\r\n    /** 动画是否循环播放 */\r\n    public get loop() { return this._loop; }\r\n    /** 动画播放速度 */\r\n    public get speed() { return this._speed; }\r\n    /** 动画播放速度的混合参数 */\r\n    public get multi() { return this._multi; }\r\n\r\n    constructor(data: any, ac: AnimatorController) {\r\n        this._name = data.state;\r\n        this._motion = data.motion || '';\r\n        this._loop = data.loop || false;\r\n        this._speed = data.speed || 1;\r\n        this._multi = data.multiplier || '';\r\n\r\n        this._ac = ac;\r\n\r\n        for (let i = 0; i < data.transitions.length; i++) {\r\n            let transition: AnimatorTransition = new AnimatorTransition(data.transitions[i], ac);\r\n            transition.isValid() && this._transitions.push(transition);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断各个分支是否满足条件，满足则转换状态\r\n     */\r\n    public checkAndTrans() {\r\n        for (let i = 0; i < this._transitions.length; i++) {\r\n            let transition: AnimatorTransition = this._transitions[i];\r\n            if (transition && transition.check()) {\r\n                transition.doTrans();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}