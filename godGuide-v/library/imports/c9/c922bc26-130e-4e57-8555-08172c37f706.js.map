{"version":3,"sources":["assets\\scripts\\common\\cmpt\\ui\\multiTexture\\MultiSprite.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EditorTool from \"../../../util/EditorTool\";\r\nimport MultiAssemblerBarFilled from \"./assembler/MultiAssemblerBarFilled\";\r\nimport MultiAssemblerRadialFilled from \"./assembler/MultiAssemblerRadialFilled\";\r\nimport MultiAssemblerSimple from \"./assembler/MultiAssemblerSimple\";\r\nimport MultiAssemblerSliced from \"./assembler/MultiAssemblerSliced\";\r\nimport MultiAssemblerTiled from \"./assembler/MultiAssemblerTiled\";\r\nimport { MultiTextureManager } from \"./MultiTextureManager\";\r\n\r\nconst { ccclass, property, requireComponent, menu, inspector } = cc._decorator;\r\n\r\n/**\r\n * Multi-Texture 渲染组件，兼容web与native，支持simple、sliced、tiled、filled\r\n */\r\n@ccclass\r\n@menu(\"Framework/UI组件/MultiSprite\")\r\n@inspector(\"packages://inspector/inspectors/comps/sprite.js\")\r\nexport default class MultiSprite extends cc.Sprite {\r\n\r\n    private _textureIdx: number = 0;\r\n    /** 当前渲染组件使用的纹理下标，不需要主动调用，该组件内部会自行处理 */\r\n    private get textureIdx(): number { return this._textureIdx; }\r\n    private set textureIdx(v: number) {\r\n        this._textureIdx = cc.misc.clampf(v, 0, MultiTextureManager.MAX_TEXTURE_NUM - 1);\r\n        this[\"setVertsDirty\"]();\r\n    }\r\n\r\n    protected resetInEditor(): void {\r\n        EditorTool.load<cc.Material>(\"res/shader/materials/multiTexture.mtl\").then((mat) => {\r\n            if (mat) {\r\n                this.setMaterial(0, mat);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        super.onLoad?.();\r\n        MultiTextureManager.addSprite(this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        super.onDestroy?.();\r\n        MultiTextureManager.removeSprite(this);\r\n    }\r\n\r\n    /**\r\n     * 设置spriteFrame和material时引擎内部会调用，更新textureIdx，更新材质属性\r\n     * @override\r\n     */\r\n    public _updateMaterial(): void {\r\n        // make sure material is belong to self.\r\n        let material = this.getMaterial(0);\r\n        if (material) {\r\n            let texture = null;\r\n            let textureImpl = null;\r\n            if (this.spriteFrame) {\r\n                texture = this.spriteFrame.getTexture();\r\n                textureImpl = texture && texture.getImpl();\r\n            }\r\n            if (material.name.indexOf(\"multiTexture\") >= 0) {\r\n                // 初始化纹理管理器\r\n                MultiTextureManager.init(material[\"_material\"]);\r\n                // 更新textureIdx\r\n                let idx = MultiTextureManager.getIdx(texture);\r\n                if (idx >= 0) {\r\n                    this.textureIdx = idx;\r\n                }\r\n                if (material.getProperty(`texture${this.textureIdx}`, 0) !== textureImpl) {\r\n                    material.setProperty(`texture${this.textureIdx}`, texture);\r\n                }\r\n            } else {\r\n                if (material.getProperty(`texture`, 0) !== textureImpl) {\r\n                    material.setProperty(`texture`, texture);\r\n                }\r\n            }\r\n        }\r\n\r\n        cc.BlendFunc.prototype[\"_updateMaterial\"].call(this);\r\n    }\r\n}\r\n\r\ncc.Assembler.register(MultiSprite, {\r\n    getConstructor(sprite) {\r\n        let ctor: any = MultiAssemblerSimple;\r\n        switch (sprite.type) {\r\n            case cc.Sprite.Type.SLICED:\r\n                ctor = MultiAssemblerSliced;\r\n                break;\r\n            case cc.Sprite.Type.TILED:\r\n                ctor = MultiAssemblerTiled;\r\n                break;\r\n            case cc.Sprite.Type.FILLED:\r\n                if (sprite._fillType === cc.Sprite.FillType.RADIAL) {\r\n                    ctor = MultiAssemblerRadialFilled;\r\n                } else {\r\n                    ctor = MultiAssemblerBarFilled;\r\n                }\r\n                break;\r\n        }\r\n        return ctor;\r\n    }\r\n});\r\n"]}