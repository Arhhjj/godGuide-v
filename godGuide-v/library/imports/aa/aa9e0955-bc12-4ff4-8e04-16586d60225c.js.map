{"version":3,"sources":["assets\\scripts\\common\\cmpt\\ui\\multiTexture\\assembler\\MultiAssemblerSimple.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MultiAssembler from \"./MultiAssembler\";\r\n\r\nexport default class MultiAssemblerSimple extends MultiAssembler {\r\n    public updateRenderData(sprite) {\r\n        this.packToDynamicAtlas(sprite, sprite._spriteFrame);\r\n\r\n        if (sprite._vertsDirty) {\r\n            this.updateUVs(sprite);\r\n            this.updateVerts(sprite);\r\n            this.updateTextureIdx(sprite);\r\n            sprite._vertsDirty = false;\r\n        }\r\n    }\r\n\r\n    public updateUVs(sprite) {\r\n        let uv = sprite._spriteFrame.uv;\r\n        let uvOffset = this.uvOffset;\r\n        let floatsPerVert = this.floatsPerVert;\r\n        let verts = this._renderData.vDatas[0];\r\n        for (let i = 0; i < 4; i++) {\r\n            let srcOffset = i * 2;\r\n            let dstOffset = floatsPerVert * i + uvOffset;\r\n            verts[dstOffset] = uv[srcOffset];\r\n            verts[dstOffset + 1] = uv[srcOffset + 1];\r\n        }\r\n    }\r\n\r\n    public updateVerts(sprite) {\r\n        let node = sprite.node,\r\n            cw = node.width, ch = node.height,\r\n            appx = node.anchorX * cw, appy = node.anchorY * ch,\r\n            l, b, r, t;\r\n        if (sprite.trim) {\r\n            l = -appx;\r\n            b = -appy;\r\n            r = cw - appx;\r\n            t = ch - appy;\r\n        }\r\n        else {\r\n            let frame = sprite.spriteFrame,\r\n                ow = frame._originalSize.width, oh = frame._originalSize.height,\r\n                rw = frame._rect.width, rh = frame._rect.height,\r\n                offset = frame._offset,\r\n                scaleX = cw / ow, scaleY = ch / oh;\r\n            let trimLeft = offset.x + (ow - rw) / 2;\r\n            let trimRight = offset.x - (ow - rw) / 2;\r\n            let trimBottom = offset.y + (oh - rh) / 2;\r\n            let trimTop = offset.y - (oh - rh) / 2;\r\n            l = trimLeft * scaleX - appx;\r\n            b = trimBottom * scaleY - appy;\r\n            r = cw + trimRight * scaleX - appx;\r\n            t = ch + trimTop * scaleY - appy;\r\n        }\r\n\r\n        let local = this._local;\r\n        local[0] = l;\r\n        local[1] = b;\r\n        local[2] = r;\r\n        local[3] = t;\r\n        this.updateWorldVerts(sprite);\r\n    }\r\n}\r\n\r\nif (CC_NATIVERENDERER) {\r\n    let proto = MultiAssemblerSimple.prototype;\r\n    //@ts-ignore\r\n    let nativeProto = renderer.SimpleSprite2D.prototype;\r\n\r\n    proto.updateWorldVerts = function (comp) {\r\n        //@ts-ignore\r\n        this._dirtyPtr[0] |= cc.Assembler.FLAG_VERTICES_DIRTY;\r\n    };\r\n\r\n    //@ts-ignore\r\n    proto._extendNative = function () {\r\n        nativeProto.ctor.call(this);\r\n    };\r\n\r\n    proto.initLocal = function () {\r\n        this._local = new Float32Array(8);\r\n        nativeProto.setLocalData.call(this, this._local);\r\n    };\r\n}\r\n"]}