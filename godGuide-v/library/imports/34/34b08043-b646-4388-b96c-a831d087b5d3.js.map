{"version":3,"sources":["assets\\scripts\\animator\\core\\AnimatorTransition.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAmE;AAGnE;;GAEG;AACH;IAMI,4BAAY,IAAS,EAAE,EAAsB;QALrC,iBAAY,GAAW,EAAE,CAAC;QAC1B,iBAAY,GAAY,KAAK,CAAC;QAC9B,gBAAW,GAAwB,EAAE,CAAC;QACtC,QAAG,GAAuB,IAAI,CAAC;QAGnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,SAAS,GAAsB,IAAI,2BAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACpC;IACL,CAAC;IAED;;OAEG;IACI,oCAAO,GAAd;QACI,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACI,kCAAK,GAAZ;QACI,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC9C,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YACnG,OAAO,KAAK,CAAC;SAChB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9B,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,oCAAO,GAAd;QACI,gBAAgB;QAChB,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;SACjC;QACD,iCAAiC;QACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;YAC9C,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;YAC9C,IAAI,IAAI,KAAK,6BAAS,CAAC,OAAO,EAAE;gBAC5B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aACtC;iBAAM,IAAI,IAAI,KAAK,6BAAS,CAAC,YAAY,EAAE;gBACxC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aAC1C;SACJ;QAED,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IACL,yBAAC;AAAD,CAhEA,AAgEC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import AnimatorCondition, { ParamType } from \"./AnimatorCondition\";\r\nimport AnimatorController from \"./AnimatorController\";\r\n\r\n/**\r\n * 状态过渡类\r\n */\r\nexport default class AnimatorTransition {\r\n    private _toStateName: string = '';\r\n    private _hasExitTime: boolean = false;\r\n    private _conditions: AnimatorCondition[] = [];\r\n    private _ac: AnimatorController = null;\r\n\r\n    constructor(data: any, ac: AnimatorController) {\r\n        this._toStateName = data.toState;\r\n        this._hasExitTime = data.hasExitTime;\r\n        this._ac = ac;\r\n        for (let i = 0; i < data.conditions.length; i++) {\r\n            let condition: AnimatorCondition = new AnimatorCondition(data.conditions[i], ac);\r\n            this._conditions.push(condition);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 返回该transition是否有效，当未勾选hasExitTime以及没有添加任何condition时此transition无效并忽略\r\n     */\r\n    public isValid(): boolean {\r\n        return this._hasExitTime || this._conditions.length > 0;\r\n    }\r\n\r\n    /**\r\n     * 判断是否满足所有转换条件\r\n     */\r\n    public check(): boolean {\r\n        if (this._toStateName === this._ac.curState.name) {\r\n            return false;\r\n        }\r\n\r\n        if (this._hasExitTime && (this._ac.curState !== this._ac.animCompleteState || !this._ac.animComplete)) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < this._conditions.length; i++) {\r\n            if (!this._conditions[i].check()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 转换状态\r\n     */\r\n    public doTrans() {\r\n        // 满足条件时重置动画播完标记\r\n        if (this._hasExitTime) {\r\n            this._ac.animComplete = false;\r\n        }\r\n        // 满足状态转换条件时重置trigger和autoTrigger\r\n        for (let i = 0; i < this._conditions.length; i++) {\r\n            let type = this._conditions[i].getParamType();\r\n            let name = this._conditions[i].getParamName();\r\n            if (type === ParamType.TRIGGER) {\r\n                this._ac.params.resetTrigger(name);\r\n            } else if (type === ParamType.AUTO_TRIGGER) {\r\n                this._ac.params.resetAutoTrigger(name);\r\n            }\r\n        }\r\n\r\n        this._ac.changeState(this._toStateName);\r\n    }\r\n}\r\n"]}