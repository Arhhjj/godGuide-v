{"version":3,"sources":["assets\\scripts\\common\\cmpt\\ui\\multiTexture\\assembler\\MultiAssemblerBarFilled.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MultiAssembler from \"./MultiAssembler\";\r\n\r\nexport default class MultiAssemblerBarFilled extends MultiAssembler {\r\n    public updateRenderData(sprite) {\r\n        let frame = sprite._spriteFrame;\r\n        this.packToDynamicAtlas(sprite, frame);\r\n\r\n        if (!sprite._vertsDirty) {\r\n            return;\r\n        }\r\n\r\n        let fillStart = sprite._fillStart;\r\n        let fillRange = sprite._fillRange;\r\n\r\n        if (fillRange < 0) {\r\n            fillStart += fillRange;\r\n            fillRange = -fillRange;\r\n        }\r\n\r\n        fillRange = fillStart + fillRange;\r\n\r\n        fillStart = fillStart > 1.0 ? 1.0 : fillStart;\r\n        fillStart = fillStart < 0.0 ? 0.0 : fillStart;\r\n\r\n        fillRange = fillRange > 1.0 ? 1.0 : fillRange;\r\n        fillRange = fillRange < 0.0 ? 0.0 : fillRange;\r\n        fillRange = fillRange - fillStart;\r\n        fillRange = fillRange < 0 ? 0 : fillRange;\r\n\r\n        let fillEnd = fillStart + fillRange;\r\n        fillEnd = fillEnd > 1 ? 1 : fillEnd;\r\n\r\n        this.updateUVs(sprite, fillStart, fillEnd);\r\n        this.updateVerts(sprite, fillStart, fillEnd);\r\n        this.updateTextureIdx(sprite);\r\n\r\n        sprite._vertsDirty = false;\r\n    }\r\n\r\n    public updateUVs(sprite, fillStart, fillEnd) {\r\n        let spriteFrame = sprite._spriteFrame;\r\n\r\n        //build uvs\r\n        let atlasWidth = spriteFrame._texture.width;\r\n        let atlasHeight = spriteFrame._texture.height;\r\n        let textureRect = spriteFrame._rect;\r\n        //uv computation should take spritesheet into account.\r\n        let ul, vb, ur, vt;\r\n        let quadUV0, quadUV1, quadUV2, quadUV3, quadUV4, quadUV5, quadUV6, quadUV7;\r\n        if (spriteFrame._rotated) {\r\n            ul = (textureRect.x) / atlasWidth;\r\n            vb = (textureRect.y + textureRect.width) / atlasHeight;\r\n            ur = (textureRect.x + textureRect.height) / atlasWidth;\r\n            vt = (textureRect.y) / atlasHeight;\r\n\r\n            quadUV0 = quadUV2 = ul;\r\n            quadUV4 = quadUV6 = ur;\r\n            quadUV3 = quadUV7 = vb;\r\n            quadUV1 = quadUV5 = vt;\r\n        }\r\n        else {\r\n            ul = (textureRect.x) / atlasWidth;\r\n            vb = (textureRect.y + textureRect.height) / atlasHeight;\r\n            ur = (textureRect.x + textureRect.width) / atlasWidth;\r\n            vt = (textureRect.y) / atlasHeight;\r\n\r\n            quadUV0 = quadUV4 = ul;\r\n            quadUV2 = quadUV6 = ur;\r\n            quadUV1 = quadUV3 = vb;\r\n            quadUV5 = quadUV7 = vt;\r\n        }\r\n\r\n        let verts = this._renderData.vDatas[0];\r\n        let uvOffset = this.uvOffset;\r\n        let floatsPerVert = this.floatsPerVert;\r\n        switch (sprite._fillType) {\r\n            case cc.Sprite.FillType.HORIZONTAL:\r\n                verts[uvOffset] = quadUV0 + (quadUV2 - quadUV0) * fillStart;\r\n                verts[uvOffset + 1] = quadUV1 + (quadUV3 - quadUV1) * fillStart;\r\n                verts[uvOffset + floatsPerVert] = quadUV0 + (quadUV2 - quadUV0) * fillEnd;\r\n                verts[uvOffset + floatsPerVert + 1] = quadUV1 + (quadUV3 - quadUV1) * fillEnd;\r\n                verts[uvOffset + floatsPerVert * 2] = quadUV4 + (quadUV6 - quadUV4) * fillStart;\r\n                verts[uvOffset + floatsPerVert * 2 + 1] = quadUV5 + (quadUV7 - quadUV5) * fillStart;\r\n                verts[uvOffset + floatsPerVert * 3] = quadUV4 + (quadUV6 - quadUV4) * fillEnd;\r\n                verts[uvOffset + floatsPerVert * 3 + 1] = quadUV5 + (quadUV7 - quadUV5) * fillEnd;\r\n                break;\r\n            case cc.Sprite.FillType.VERTICAL:\r\n                verts[uvOffset] = quadUV0 + (quadUV4 - quadUV0) * fillStart;\r\n                verts[uvOffset + 1] = quadUV1 + (quadUV5 - quadUV1) * fillStart;\r\n                verts[uvOffset + floatsPerVert] = quadUV2 + (quadUV6 - quadUV2) * fillStart;\r\n                verts[uvOffset + floatsPerVert + 1] = quadUV3 + (quadUV7 - quadUV3) * fillStart;\r\n                verts[uvOffset + floatsPerVert * 2] = quadUV0 + (quadUV4 - quadUV0) * fillEnd;\r\n                verts[uvOffset + floatsPerVert * 2 + 1] = quadUV1 + (quadUV5 - quadUV1) * fillEnd;\r\n                verts[uvOffset + floatsPerVert * 3] = quadUV2 + (quadUV6 - quadUV2) * fillEnd;\r\n                verts[uvOffset + floatsPerVert * 3 + 1] = quadUV3 + (quadUV7 - quadUV3) * fillEnd;\r\n                break;\r\n            default:\r\n                cc[\"errorID\"](2626);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public updateVerts(sprite, fillStart, fillEnd) {\r\n        let node = sprite.node,\r\n            width = node.width, height = node.height,\r\n            appx = node.anchorX * width, appy = node.anchorY * height;\r\n\r\n        let l = -appx, b = -appy,\r\n            r = width - appx, t = height - appy;\r\n\r\n        let progressStart, progressEnd;\r\n        switch (sprite._fillType) {\r\n            case cc.Sprite.FillType.HORIZONTAL:\r\n                progressStart = l + (r - l) * fillStart;\r\n                progressEnd = l + (r - l) * fillEnd;\r\n\r\n                l = progressStart;\r\n                r = progressEnd;\r\n                break;\r\n            case cc.Sprite.FillType.VERTICAL:\r\n                progressStart = b + (t - b) * fillStart;\r\n                progressEnd = b + (t - b) * fillEnd;\r\n\r\n                b = progressStart;\r\n                t = progressEnd;\r\n                break;\r\n            default:\r\n                cc[\"errorID\"](2626);\r\n                break;\r\n        }\r\n\r\n        let local = this._local;\r\n        local[0] = l;\r\n        local[1] = b;\r\n        local[2] = r;\r\n        local[3] = t;\r\n\r\n        this.updateWorldVerts(sprite);\r\n    }\r\n}\r\n"]}