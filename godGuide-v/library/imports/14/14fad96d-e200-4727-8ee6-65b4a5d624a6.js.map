{"version":3,"sources":["assets\\scripts\\common\\cmpt\\ui\\res\\ResSpine.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAoC;AAE9B,IAAA,KAAwD,EAAE,CAAC,UAAU,EAAnE,OAAO,aAAA,EAAE,IAAI,UAAA,EAAE,gBAAgB,sBAAA,EAAE,gBAAgB,sBAAkB,CAAC;AAE5E;;GAEG;AAKH;IAAsC,4BAAY;IAAlD;QAAA,qEA2CC;QA1CG,UAAU;QACF,YAAM,GAAoB,IAAI,CAAC;QAE/B,UAAI,GAAW,EAAE,CAAC;QAElB,YAAM,GAAgB,IAAI,CAAC;;IAqCvC,CAAC;IApCG,sBAAY,2BAAK;aAAjB;YACI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;aAChD;YACD,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAED,sBAAW,kCAAY;aAAvB;YACI,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;QACnC,CAAC;aACD,UAAwB,CAAkB;;YACtC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,CAAC,EAAE;gBAChD,OAAO;aACV;YACD,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,MAAM,GAAG;YACZ,MAAA,IAAI,CAAC,MAAM,0CAAE,MAAM,GAAG;YACtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;QAChC,CAAC;;;OATA;IAWS,4BAAS,GAAnB;;QACI,MAAA,IAAI,CAAC,MAAM,0CAAE,MAAM,GAAG;IAC1B,CAAC;IAED;;;OAGG;IACU,kCAAe,GAA5B,UAA6B,GAAW;uCAAG,OAAO;;;;;wBAC9C,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;wBACH,KAAA,aAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,CAAA;gCAA7B,wBAA6B;wBAAI,qBAAM,aAAG,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,EAAA;;8BAApC,SAAoC;;;wBAA9E,MAAM,KAAwE;wBAClF,2BAA2B;wBAC3B,IAAI,MAAM,YAAY,EAAE,CAAC,YAAY,IAAI,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE;4BACxD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;yBAC9B;;;;;KACJ;IA1CgB,QAAQ;QAJ5B,OAAO;QACP,gBAAgB;QAChB,gBAAgB,CAAC,EAAE,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,yBAAyB,CAAC;OACX,QAAQ,CA2C5B;IAAD,eAAC;CA3CD,AA2CC,CA3CqC,EAAE,CAAC,SAAS,GA2CjD;kBA3CoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["import Res from \"../../../util/Res\";\r\n\r\nconst { ccclass, menu, disallowMultiple, requireComponent } = cc._decorator;\r\n\r\n/**\r\n * spine组件，自动管理资源的引用计数\r\n */\r\n@ccclass\r\n@disallowMultiple\r\n@requireComponent(sp.Skeleton)\r\n@menu(\"Framework/UI组件/ResSpine\")\r\nexport default class ResSpine extends cc.Component {\r\n    // 动态加载的资源\r\n    private _asset: sp.SkeletonData = null;\r\n\r\n    private _url: string = \"\";\r\n\r\n    private _spine: sp.Skeleton = null;\r\n    private get spine(): sp.Skeleton {\r\n        if (!this._spine) {\r\n            this._spine = this.getComponent(sp.Skeleton);\r\n        }\r\n        return this._spine;\r\n    }\r\n\r\n    public get skeletonData(): sp.SkeletonData {\r\n        return this.spine.skeletonData;\r\n    }\r\n    public set skeletonData(v: sp.SkeletonData) {\r\n        if (!this.isValid || this.spine.skeletonData === v) {\r\n            return;\r\n        }\r\n        v?.addRef();\r\n        this._asset?.decRef();\r\n        this._asset = v;\r\n        this.spine.skeletonData = v;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        this._asset?.decRef();\r\n    }\r\n\r\n    /**\r\n     * 设置skeletonData\r\n     * @param url 骨骼资源路径，规则同Res加载路径\r\n     */\r\n    public async setSkeletonData(url: string): Promise<void> {\r\n        this._url = url;\r\n        let result = Res.get(url, sp.SkeletonData) || await Res.load(url, sp.SkeletonData);\r\n        // 如短时间内多次调用，需保证显示最新一次加载的资源\r\n        if (result instanceof sp.SkeletonData && this._url === url) {\r\n            this.skeletonData = result;\r\n        }\r\n    }\r\n}\r\n"]}