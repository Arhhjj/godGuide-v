{"version":3,"sources":["assets\\scripts\\common\\util\\Res.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/** 资源缓存基础数据结构 */\r\ninterface CacheData {\r\n    asset: cc.Asset,\r\n    /** 资源是否需要释放 */\r\n    release: boolean,\r\n    /** 资源最后一次被加载的时间点（秒） */\r\n    lastLoadTime: number,\r\n}\r\n\r\n/** 预制体资源缓存数据 */\r\ninterface PrefabCacheData extends CacheData {\r\n    /** 此prefab关联的实例节点 */\r\n    nodes?: cc.Node[],\r\n}\r\n\r\n/** asset bundle路径校验 */\r\nconst BUNDLE_CHECK = \"ab:\";\r\n\r\n/**\r\n * 资源管理类\r\n * \r\n * 资源加载:\r\n * 1. 如果加载resources内的资源，直接写明resources内的路径即可\r\n * 2. 如果加载路径以ab:开头，则会加载对应bundle内的资源。例：ab:bundleA/xxx/a表示bundle名为bundleA，资源路径为xxx/a\r\n * \r\n * 引用计数管理：\r\n * 1. 尽量使用此类的接口加载所有资源、instantiate节点实例，否则需要自行管理引用计数\r\n * 2. Res.instantiate不要对动态生成的节点使用，尽量只instantiate prefab上预设好的节点，否则有可能会导致引用计数的管理出错\r\n * 3. 调用load接口时如需传入release参数，则同一资源在全局调用load时release参数尽量保持一致，否则可能不符合预期\r\n * 4. 请使用ResSpine、ResSprite组件去动态加载spine、图片资源，否则需要自行管理这些资源的引用计数\r\n */\r\nexport default class Res {\r\n    /** 节点与其关联的prefab路径 */\r\n    private static _nodePath: Map<cc.Node, string> = new Map();\r\n    /** prefab资源与路径 */\r\n    private static _prefabPath: Map<cc.Prefab, string> = new Map();\r\n\r\n    private static _prefabCache: Map<string, PrefabCacheData> = new Map();\r\n    private static _spriteFrameCache: Map<string, CacheData> = new Map();\r\n    private static _spriteAtlasCache: Map<string, CacheData> = new Map();\r\n    private static _skeletonDataCache: Map<string, CacheData> = new Map();\r\n    private static _otherCache: Map<string, cc.Asset> = new Map();\r\n\r\n    /** 资源释放的间隔时间（秒），资源超过此间隔未被load才可释放 */\r\n    public static releaseSec: number = 0;\r\n\r\n    /**\r\n     * 资源路径解析\r\n     * @param url \r\n     */\r\n    private static parseUrl(url: string): { bundle?: string, loadUrl: string } {\r\n        if (url.startsWith(BUNDLE_CHECK)) {\r\n            let loadUrl = url.substring(BUNDLE_CHECK.length);\r\n            let idx = loadUrl.indexOf(\"/\");\r\n            let bundle = loadUrl.substring(0, idx);\r\n            loadUrl = loadUrl.substring(idx + 1);\r\n            return { bundle: bundle, loadUrl: loadUrl };\r\n        } else {\r\n            return { loadUrl: url };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过节点或预制查找已缓存prefab路径\r\n     * @param target \r\n     */\r\n    private static getCachePrefabUrl(target: cc.Node | cc.Prefab): string {\r\n        let url = \"\";\r\n        if (target instanceof cc.Node) {\r\n            let cur = target;\r\n            while (cur) {\r\n                if (cur[\"_prefab\"] && cur[\"_prefab\"][\"root\"]) {\r\n                    url = this._nodePath.get(cur[\"_prefab\"][\"root\"]) || \"\";\r\n                    if (url) {\r\n                        break;\r\n                    }\r\n                }\r\n                cur = cur.parent;\r\n            }\r\n        } else if (target instanceof cc.Prefab) {\r\n            url = this._prefabPath.get(target) || \"\";\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * 缓存资源\r\n     * @param url 资源路径\r\n     * @param asset 资源\r\n     * @param release 资源是否需要释放\r\n     */\r\n    private static cacheAsset(url: string, asset: cc.Asset, release: boolean = true): void {\r\n        if (!asset) {\r\n            return;\r\n        }\r\n\r\n        let func = (map: Map<string, CacheData>) => {\r\n            if (map.has(url)) {\r\n                return;\r\n            }\r\n            asset.addRef();\r\n            if (asset instanceof cc.Prefab) {\r\n                this._prefabPath.set(asset, url);\r\n            }\r\n            let cacheData: CacheData = {\r\n                asset: asset,\r\n                release: release,\r\n                lastLoadTime: Date.now() / 1000\r\n            };\r\n            map.set(url, cacheData);\r\n        };\r\n\r\n        if (asset instanceof cc.Prefab) {\r\n            func(this._prefabCache);\r\n        } else if (asset instanceof cc.SpriteFrame) {\r\n            func(this._spriteFrameCache);\r\n        } else if (asset instanceof cc.SpriteAtlas) {\r\n            func(this._spriteAtlasCache);\r\n        } else if (asset instanceof sp.SkeletonData) {\r\n            func(this._skeletonDataCache);\r\n        } else {\r\n            if (this._otherCache.has(url)) {\r\n                return;\r\n            }\r\n            asset.addRef();\r\n            this._otherCache.set(url, asset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取缓存资源。通常不应直接调用此接口，除非调用前能确保资源已加载并且能自行管理引用计数\r\n     * @param url 资源路径\r\n     * @param type 资源类型\r\n     */\r\n    public static get<T extends cc.Asset>(url: string, type: typeof cc.Asset): T | null {\r\n        let asset: unknown = null;\r\n        let func = (map: Map<string, CacheData>) => {\r\n            let data = map.get(url);\r\n            if (data) {\r\n                asset = data.asset;\r\n                data.lastLoadTime = Date.now() / 1000;\r\n            }\r\n        };\r\n\r\n        if (type === cc.Prefab) {\r\n            func(this._prefabCache);\r\n        } else if (type === cc.SpriteFrame) {\r\n            func(this._spriteFrameCache);\r\n        } else if (type === cc.SpriteAtlas) {\r\n            func(this._spriteAtlasCache);\r\n        } else if (type === sp.SkeletonData) {\r\n            func(this._skeletonDataCache);\r\n        } else {\r\n            asset = this._otherCache.get(url);\r\n        }\r\n\r\n        return asset as T;\r\n    }\r\n\r\n    /**\r\n     * 加载bundle\r\n     * @param nameOrUrl bundle路径\r\n     */\r\n    public static loadBundle(nameOrUrl: string): Promise<cc.AssetManager.Bundle> {\r\n        return new Promise((resolve, reject) => {\r\n            cc.assetManager.loadBundle(nameOrUrl, (error: Error, bundle: cc.AssetManager.Bundle) => {\r\n                if (error) {\r\n                    cc.error(`[Res.loadBundle] error: ${error}`);\r\n                    resolve(null);\r\n                } else {\r\n                    resolve(bundle);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 加载单个资源\r\n     * @param url 资源路径\r\n     * @param type 资源类型\r\n     * @param release 资源是否需要释放\r\n     */\r\n    public static async load<T extends cc.Asset>(url: string, type: typeof cc.Asset, release: boolean = true): Promise<T | null> {\r\n        if (!url) {\r\n            cc.error(`[Res.load] url is empty`);\r\n            return null;\r\n        }\r\n\r\n        let asset: T = this.get(url, type);\r\n        if (asset) {\r\n            return asset;\r\n        }\r\n\r\n        let parseData = this.parseUrl(url);\r\n        if (parseData.bundle && !cc.assetManager.getBundle(parseData.bundle)) {\r\n            await this.loadBundle(parseData.bundle);\r\n        }\r\n\r\n        asset = await new Promise((resolve, reject) => {\r\n            let bundle: cc.AssetManager.Bundle = parseData.bundle ? cc.assetManager.getBundle(parseData.bundle) : cc.resources;\r\n            if (!bundle) {\r\n                cc.error(`[Res.load] cant find bundle: ${url}`);\r\n                resolve(null);\r\n                return;\r\n            }\r\n\r\n            bundle.load(parseData.loadUrl, type, (error: Error, resource: T) => {\r\n                if (error) {\r\n                    cc.error(`[Res.load] load error: ${error}`);\r\n                    resolve(null);\r\n                } else {\r\n                    this.cacheAsset(url, resource, release);\r\n                    resolve(resource);\r\n                }\r\n            });\r\n        });\r\n        return asset;\r\n    }\r\n\r\n    /**\r\n     * 加载某个文件夹内的某类资源\r\n     * @param url 资源路径\r\n     * @param type 资源类型\r\n     * @param release 资源是否需要释放\r\n     */\r\n    public static async loadDir<T extends cc.Asset>(url: string, type: typeof cc.Asset, release: boolean = true): Promise<T[]> {\r\n        if (!url) {\r\n            cc.error(`[Res.load] url is empty`);\r\n            return [];\r\n        }\r\n\r\n        let parseData = this.parseUrl(url);\r\n        if (parseData.bundle && !cc.assetManager.getBundle(parseData.bundle)) {\r\n            await this.loadBundle(parseData.bundle);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let bundle: cc.AssetManager.Bundle = parseData.bundle ? cc.assetManager.getBundle(parseData.bundle) : cc.resources;\r\n            if (!bundle) {\r\n                cc.error(`[Res.loadDir] cant find bundle: ${url}`);\r\n                resolve([]);\r\n                return;\r\n            }\r\n\r\n            bundle.loadDir(parseData.loadUrl, type, (error: Error, resource: T[]) => {\r\n                if (error) {\r\n                    cc.error(`[Res.loadDir] load error: ${error}`);\r\n                    resolve([]);\r\n                } else {\r\n                    let infos = bundle.getDirWithPath(url, type);\r\n                    resource.forEach((asset, i) => { this.cacheAsset(infos[i].path, asset, release); });\r\n                    resolve(resource);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取节点实例，并建立新节点与prefab资源的联系\r\n     * @param original 用于实例化节点的prefab或node\r\n     * @param related 如果original不是动态加载的prefab，则需传入与original相关联的动态加载的prefab或node，以便资源释放的管理\r\n     * @example \r\n     * // 1.original为动态加载的prefab，无需传related参数\r\n     * Res.instantiate(original)\r\n     * \r\n     * // 2.aPrefab为动态加载的prefab，aNode为aPrefab的实例节点（aNode = Res.instantiate(aPrefab)），original为被aPrefab静态引用的prefab，则调用时需要用如下方式才能保证引用关系正确\r\n     * Res.instantiate(original, aPrefab)\r\n     * Res.instantiate(original, aNode)\r\n     * \r\n     * // 3.aPrefab为动态加载的prefab，aNode为aPrefab的实例节点（aNode = Res.instantiate(aPrefab)），original为aNode的某个子节点，则如下方式均可保证引用关系正确\r\n     * Res.instantiate(original)\r\n     * Res.instantiate(original, aPrefab)\r\n     * Res.instantiate(original, aNode)\r\n     */\r\n    public static instantiate(original: cc.Node | cc.Prefab, related?: cc.Node | cc.Prefab): cc.Node {\r\n        if (!original) {\r\n            cc.error(\"[Res.instantiate] original is null\");\r\n            return null;\r\n        }\r\n\r\n        let node = cc.instantiate(original) as cc.Node;\r\n        let url = this.getCachePrefabUrl(related) || this.getCachePrefabUrl(original);\r\n        if (url) {\r\n            let cacheData: PrefabCacheData = this._prefabCache.get(url);\r\n            // release为true才缓存关联节点\r\n            if (cacheData && cacheData.release) {\r\n                if (!Array.isArray(cacheData.nodes)) {\r\n                    cacheData.nodes = [];\r\n                }\r\n                cacheData.nodes.push(node);\r\n                this._nodePath.set(node, url);\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 尝试释放所有缓存资源\r\n     * - 只要遵守本文件的规则注释，此接口不会导致正在被使用的资源被引擎释放，可放心使用\r\n     */\r\n    public static releaseAll(): void {\r\n        let nowSec = Date.now() / 1000;\r\n        // prefab\r\n        this._prefabCache.forEach((cacheData, url) => {\r\n            if (!cacheData.release || nowSec - cacheData.lastLoadTime < this.releaseSec) {\r\n                return;\r\n            }\r\n\r\n            if (Array.isArray(cacheData.nodes)) {\r\n                for (let i = cacheData.nodes.length - 1; i >= 0; i--) {\r\n                    let node = cacheData.nodes[i];\r\n                    if (node.isValid) {\r\n                        continue;\r\n                    }\r\n                    this._nodePath.delete(node);\r\n                    cacheData.nodes.splice(i, 1);\r\n                }\r\n                if (cacheData.nodes.length === 0) {\r\n                    delete cacheData.nodes;\r\n                }\r\n            }\r\n\r\n            if (!Array.isArray(cacheData.nodes)) {\r\n                cacheData.asset.decRef();\r\n                this._prefabPath.delete(cacheData.asset as cc.Prefab);\r\n                this._prefabCache.delete(url);\r\n            }\r\n        });\r\n        // spriteFrame、spriteAtlas、skeletonData\r\n        let arr = [this._spriteFrameCache, this._spriteAtlasCache, this._skeletonDataCache];\r\n        arr.forEach((map) => {\r\n            map.forEach((cacheData, url) => {\r\n                if (!cacheData.release || nowSec - cacheData.lastLoadTime < this.releaseSec) {\r\n                    return;\r\n                }\r\n                cacheData.asset.decRef();\r\n                map.delete(url);\r\n            });\r\n        });\r\n        // other\r\n    }\r\n\r\n    /**\r\n     * 获取resources包内资源打包后的真实路径\r\n     * @param url resources下的资源路径\r\n     * @param ext 资源的后缀名\r\n     * @param isNative true:返回打包后native目录下的路径，false:返回打包后import目录下的路径\r\n     */\r\n    public static getNativeUrlByResources(url: string, ext: string, isNative: boolean = true): string {\r\n        try {\r\n            let nativeUrl = cc.assetManager[\"_transform\"]({ path: url, bundle: cc.AssetManager.BuiltinBundleName.RESOURCES, __isNative__: isNative, ext: ext });\r\n            return nativeUrl;\r\n        } catch (error) {\r\n            cc.error(`[Res.getNativeUrlByResources] error url: ${url}`);\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\n"]}