{"version":3,"sources":["assets\\scripts\\animator\\core\\AnimatorBase.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import AnimatorController from \"./AnimatorController\";\r\nimport AnimatorState from \"./AnimatorState\";\r\nimport AnimatorStateLogic from \"./AnimatorStateLogic\";\r\n\r\nconst { ccclass, property, executionOrder } = cc._decorator;\r\n\r\n/**\r\n * 自定义控制动画播放的接口\r\n */\r\nexport interface AnimationPlayer {\r\n    /** 设置动画播放结束的回调 */\r\n    setFinishedCallback(callback: () => void, target: any): void;\r\n    /** 播放动画 */\r\n    playAnimation(animName: string, loop: boolean): void;\r\n    /** 缩放动画播放速率 */\r\n    scaleTime(scale: number): void;\r\n}\r\n\r\n/**\r\n * 状态机组件基类 优先执行生命周期\r\n */\r\n@ccclass\r\n@executionOrder(-1000)\r\nexport default class AnimatorBase extends cc.Component {\r\n    @property({ type: cc.JsonAsset, tooltip: CC_DEV && '状态机json文件' })\r\n    protected assetRawUrl: cc.JsonAsset = null;\r\n\r\n    @property({ tooltip: CC_DEV && '是否在start中自动启动状态机' })\r\n    protected playOnStart: boolean = true;\r\n\r\n    @property({ tooltip: CC_DEV && '是否在update中自动触发状态机逻辑更新' })\r\n    protected autoUpdate: boolean = true;\r\n\r\n    /** 是否初始化 */\r\n    protected _hasInit: boolean = false;\r\n    /** 状态机控制 */\r\n    protected _ac: AnimatorController = null;\r\n\r\n    /** 各个状态逻辑控制，key为状态名 */\r\n    protected _stateLogicMap: Map<string, AnimatorStateLogic> = null;\r\n    /** 状态切换时的回调 */\r\n    protected _onStateChangeCall: (fromState: string, toState: string) => void = null;\r\n    /** 自定义的动画播放控制器 */\r\n    protected _animationPlayer: AnimationPlayer = null;\r\n\r\n    protected _extraMulti: number = 1;\r\n    /** 统一控制所有动画播放速度的参数 */\r\n    public get extraMulti(): number { return this._extraMulti; }\r\n    public set extraMulti(v: number) {\r\n        if (this._extraMulti === v) {\r\n            return;\r\n        }\r\n        this._extraMulti = v;\r\n        this.updatePlaySpeed();\r\n    }\r\n\r\n    /** 当前状态名 */\r\n    public get curStateName(): string { return this._ac.curState.name; }\r\n    /** 当前动画名 */\r\n    public get curStateMotion(): string { return this._ac.curState.motion; }\r\n    /** 当前动画是否播放完毕 */\r\n    public get animComplete(): boolean { return this._ac.animComplete; }\r\n\r\n    /**\r\n     * 手动初始化状态机，可传入0-3个参数，类型如下\r\n     * - onStateChangeCall 状态切换时的回调\r\n     * - stateLogicMap 各个状态逻辑控制\r\n     * - animationPlayer 自定义动画控制\r\n     * @virtual\r\n     */\r\n    public onInit(...args: Array<Map<string, AnimatorStateLogic> | ((fromState: string, toState: string) => void) | AnimationPlayer>) {\r\n    }\r\n\r\n    /**\r\n     * 处理初始化参数\r\n     */\r\n    protected initArgs(...args: Array<Map<string, AnimatorStateLogic> | ((fromState: string, toState: string) => void) | AnimationPlayer>) {\r\n        args.forEach((arg) => {\r\n            if (!arg) {\r\n                return;\r\n            }\r\n            if (typeof arg === 'function') {\r\n                this._onStateChangeCall = arg;\r\n            } else if (typeof arg === 'object') {\r\n                if (arg instanceof Map) {\r\n                    this._stateLogicMap = arg;\r\n                } else {\r\n                    this._animationPlayer = arg;\r\n                    this._animationPlayer.setFinishedCallback(this.onAnimFinished, this);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新动画播放速度\r\n     */\r\n    private updatePlaySpeed() {\r\n        // 混合当前动画播放速度\r\n        let playSpeed = this._ac.curState.speed * this.extraMulti;\r\n        if (this._ac.curState.multi) {\r\n            playSpeed *= this._ac.params.getNumber(this._ac.curState.multi) || 1;\r\n        }\r\n        this.scaleTime(playSpeed);\r\n    }\r\n\r\n    private updateAnimator() {\r\n        // 更新动画播放速度\r\n        this.updatePlaySpeed();\r\n\r\n        // 更新AnimatorStateLogic\r\n        if (this._stateLogicMap) {\r\n            let curLogic = this._stateLogicMap.get(this._ac.curState.name);\r\n            curLogic && curLogic.onUpdate();\r\n        }\r\n\r\n        // 更新状态机逻辑\r\n        this._ac.updateAnimator();\r\n    }\r\n\r\n    protected update() {\r\n        if (this._hasInit && this.autoUpdate) {\r\n            this.updateAnimator();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 手动调用更新\r\n     */\r\n    public manualUpdate() {\r\n        if (this._hasInit && !this.autoUpdate) {\r\n            this.updateAnimator();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析状态机json文件\r\n     */\r\n    protected initJson(json: any) {\r\n        this._ac = new AnimatorController(this, json);\r\n        // 执行默认状态\r\n        this._ac.changeState(json.defaultState);\r\n    }\r\n\r\n    /**\r\n     * 动画结束的回调\r\n     */\r\n    protected onAnimFinished() {\r\n        this._ac.onAnimationComplete();\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     * @virtual\r\n     * @param animName 动画名\r\n     * @param loop 是否循环播放\r\n     */\r\n    protected playAnimation(animName: string, loop: boolean) {\r\n    }\r\n\r\n    /**\r\n     * 缩放动画播放速率\r\n     * @virtual\r\n     * @param scale 缩放倍率\r\n     */\r\n    protected scaleTime(scale: number) {\r\n    }\r\n\r\n    /** \r\n     * 状态切换时的逻辑（状态机内部方法，不能由外部直接调用）\r\n     */\r\n    public onStateChange(fromState: AnimatorState, toState: AnimatorState) {\r\n        this.playAnimation(toState.motion, toState.loop);\r\n\r\n        let fromStateName = fromState ? fromState.name : '';\r\n\r\n        if (this._stateLogicMap) {\r\n            let fromLogic = this._stateLogicMap.get(fromStateName);\r\n            fromLogic && fromLogic.onExit();\r\n            let toLogic = this._stateLogicMap.get(toState.name);\r\n            toLogic && toLogic.onEntry();\r\n        }\r\n\r\n        this._onStateChangeCall && this._onStateChangeCall(fromStateName, toState.name);\r\n    }\r\n\r\n    /**\r\n     * 设置boolean类型参数的值\r\n     */\r\n    public setBool(key: string, value: boolean) {\r\n        this._ac.params.setBool(key, value);\r\n    }\r\n\r\n    /**\r\n     * 获取boolean类型参数的值\r\n     */\r\n    public getBool(key: string): boolean {\r\n        return this._ac.params.getBool(key) !== 0;\r\n    }\r\n\r\n    /**\r\n     * 设置number类型参数的值\r\n     */\r\n    public setNumber(key: string, value: number) {\r\n        this._ac.params.setNumber(key, value);\r\n    }\r\n\r\n    /**\r\n     * 获取number类型参数的值\r\n     */\r\n    public getNumber(key: string): number {\r\n        return this._ac.params.getNumber(key);\r\n    }\r\n\r\n    /**\r\n     * 设置trigger类型参数的值\r\n     */\r\n    public setTrigger(key: string) {\r\n        this._ac.params.setTrigger(key);\r\n    }\r\n\r\n    /**\r\n     * 重置trigger类型参数的值\r\n     */\r\n    public resetTrigger(key: string) {\r\n        this._ac.params.resetTrigger(key);\r\n    }\r\n\r\n    /**\r\n     * 设置autoTrigger类型参数的值（autoTrigger类型参数不需要主动reset，每次状态机更新结束后会自动reset）\r\n     */\r\n    public autoTrigger(key: string) {\r\n        this._ac.params.autoTrigger(key);\r\n    }\r\n\r\n    /**\r\n     * 无视条件直接跳转状态，如果当前已处于此状态则重置状态\r\n     * @param 状态名\r\n     */\r\n    public play(stateName: string) {\r\n        if (!this._hasInit) {\r\n            return;\r\n        }\r\n        this._ac.play(stateName);\r\n    }\r\n}\r\n"]}