{"version":3,"sources":["assets\\scripts\\common\\cmpt\\ui\\multiTexture\\assembler\\MultiAssemblerRadialFilled.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MultiAssembler from \"./MultiAssembler\";\r\n\r\nconst PI_2 = Math.PI * 2;\r\n\r\nlet _vertPos = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];\r\nlet _vertices = [0, 0, 0, 0];\r\nlet _uvs = [0, 0, 0, 0, 0, 0, 0, 0];\r\nlet _intersectPoint_1 = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];\r\nlet _intersectPoint_2 = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];\r\nlet _center = cc.v2(0, 0);\r\nlet _triangles = [];\r\n\r\nfunction _calcInsectedPoints(left, right, bottom, top, center, angle, intersectPoints) {\r\n    //left bottom, right, top\r\n    let sinAngle = Math.sin(angle);\r\n    let cosAngle = Math.cos(angle);\r\n    let tanAngle, cotAngle;\r\n    if (Math.cos(angle) !== 0) {\r\n        tanAngle = sinAngle / cosAngle;\r\n        //calculate right and left\r\n        if ((left - center.x) * cosAngle > 0) {\r\n            let yleft = center.y + tanAngle * (left - center.x);\r\n            intersectPoints[0].x = left;\r\n            intersectPoints[0].y = yleft;\r\n        }\r\n        if ((right - center.x) * cosAngle > 0) {\r\n            let yright = center.y + tanAngle * (right - center.x);\r\n\r\n            intersectPoints[2].x = right;\r\n            intersectPoints[2].y = yright;\r\n        }\r\n\r\n    }\r\n\r\n    if (Math.sin(angle) !== 0) {\r\n        cotAngle = cosAngle / sinAngle;\r\n        //calculate  top and bottom\r\n        if ((top - center.y) * sinAngle > 0) {\r\n            let xtop = center.x + cotAngle * (top - center.y);\r\n            intersectPoints[3].x = xtop;\r\n            intersectPoints[3].y = top;\r\n        }\r\n        if ((bottom - center.y) * sinAngle > 0) {\r\n            let xbottom = center.x + cotAngle * (bottom - center.y);\r\n            intersectPoints[1].x = xbottom;\r\n            intersectPoints[1].y = bottom;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction _calculateVertices(sprite) {\r\n    let node = sprite.node,\r\n        width = node.width, height = node.height,\r\n        appx = node.anchorX * width, appy = node.anchorY * height;\r\n\r\n    let l = -appx, b = -appy,\r\n        r = width - appx, t = height - appy;\r\n\r\n    let vertices = _vertices;\r\n    vertices[0] = l;\r\n    vertices[1] = b;\r\n    vertices[2] = r;\r\n    vertices[3] = t;\r\n\r\n    let fillCenter = sprite._fillCenter,\r\n        cx = _center.x = Math.min(Math.max(0, fillCenter.x), 1) * (r - l) + l,\r\n        cy = _center.y = Math.min(Math.max(0, fillCenter.y), 1) * (t - b) + b;\r\n\r\n    _vertPos[0].x = _vertPos[3].x = l;\r\n    _vertPos[1].x = _vertPos[2].x = r;\r\n    _vertPos[0].y = _vertPos[1].y = b;\r\n    _vertPos[2].y = _vertPos[3].y = t;\r\n\r\n    _triangles.length = 0;\r\n    if (cx !== vertices[0]) {\r\n        _triangles[0] = [3, 0];\r\n    }\r\n    if (cx !== vertices[2]) {\r\n        _triangles[2] = [1, 2];\r\n    }\r\n    if (cy !== vertices[1]) {\r\n        _triangles[1] = [0, 1];\r\n    }\r\n    if (cy !== vertices[3]) {\r\n        _triangles[3] = [2, 3];\r\n    }\r\n}\r\n\r\nfunction _calculateUVs(spriteFrame) {\r\n    let atlasWidth = spriteFrame._texture.width;\r\n    let atlasHeight = spriteFrame._texture.height;\r\n    let textureRect = spriteFrame._rect;\r\n\r\n    let u0, u1, v0, v1;\r\n    let uvs = _uvs;\r\n\r\n    if (spriteFrame._rotated) {\r\n        u0 = (textureRect.x) / atlasWidth;\r\n        u1 = (textureRect.x + textureRect.height) / atlasWidth;\r\n\r\n        v0 = (textureRect.y) / atlasHeight;\r\n        v1 = (textureRect.y + textureRect.width) / atlasHeight;\r\n\r\n        uvs[0] = uvs[2] = u0;\r\n        uvs[4] = uvs[6] = u1;\r\n        uvs[3] = uvs[7] = v1;\r\n        uvs[1] = uvs[5] = v0;\r\n    }\r\n    else {\r\n        u0 = (textureRect.x) / atlasWidth;\r\n        u1 = (textureRect.x + textureRect.width) / atlasWidth;\r\n\r\n        v0 = (textureRect.y) / atlasHeight;\r\n        v1 = (textureRect.y + textureRect.height) / atlasHeight;\r\n\r\n        uvs[0] = uvs[4] = u0;\r\n        uvs[2] = uvs[6] = u1;\r\n        uvs[1] = uvs[3] = v1;\r\n        uvs[5] = uvs[7] = v0;\r\n    }\r\n}\r\n\r\nfunction _getVertAngle(start, end) {\r\n    let placementX, placementY;\r\n    placementX = end.x - start.x;\r\n    placementY = end.y - start.y;\r\n\r\n    if (placementX === 0 && placementY === 0) {\r\n        return undefined;\r\n    } else if (placementX === 0) {\r\n        if (placementY > 0) {\r\n            return Math.PI * 0.5;\r\n        } else {\r\n            return Math.PI * 1.5;\r\n        }\r\n    } else {\r\n        let angle = Math.atan(placementY / placementX);\r\n        if (placementX < 0) {\r\n            angle += Math.PI;\r\n        }\r\n\r\n        return angle;\r\n    }\r\n}\r\n\r\nexport default class MultiAssemblerRadialFilled extends MultiAssembler {\r\n    public initData() {\r\n        this._renderData.createFlexData(0, 4, 6, this.getVfmt());\r\n        this.updateIndices();\r\n    }\r\n\r\n    public updateRenderData(sprite) {\r\n        let frame = sprite.spriteFrame;\r\n        this.packToDynamicAtlas(sprite, frame);\r\n\r\n        if (sprite._vertsDirty) {\r\n            let fillStart = sprite._fillStart;\r\n            let fillRange = sprite._fillRange;\r\n            if (fillRange < 0) {\r\n                fillStart += fillRange;\r\n                fillRange = -fillRange;\r\n            }\r\n\r\n            //do round fill start [0,1), include 0, exclude 1\r\n            while (fillStart >= 1.0) fillStart -= 1.0;\r\n            while (fillStart < 0.0) fillStart += 1.0;\r\n\r\n            fillStart *= PI_2;\r\n            fillRange *= PI_2;\r\n\r\n            //build vertices\r\n            _calculateVertices(sprite);\r\n            //build uvs\r\n            _calculateUVs(frame);\r\n\r\n            _calcInsectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart, _intersectPoint_1);\r\n            _calcInsectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart + fillRange, _intersectPoint_2);\r\n\r\n            this.updateVerts(sprite, fillStart, fillRange);\r\n            this.updateTextureIdx(sprite);\r\n\r\n            sprite._vertsDirty = false;\r\n        }\r\n    }\r\n\r\n    public updateVerts(sprite, fillStart, fillRange) {\r\n        let fillEnd = fillStart + fillRange;\r\n\r\n        let local = this._local;\r\n        local.length = 0;\r\n\r\n        let offset = 0;\r\n        let floatsPerTriangle = 3 * this.floatsPerVert;\r\n        for (let triangleIndex = 0; triangleIndex < 4; ++triangleIndex) {\r\n            let triangle = _triangles[triangleIndex];\r\n            if (!triangle) {\r\n                continue;\r\n            }\r\n            //all in\r\n            if (fillRange >= PI_2) {\r\n                local.length = offset + floatsPerTriangle;\r\n                this._generateTriangle(local, offset, _center, _vertPos[triangle[0]], _vertPos[triangle[1]]);\r\n                offset += floatsPerTriangle;\r\n                continue;\r\n            }\r\n            //test against\r\n            let startAngle = _getVertAngle(_center, _vertPos[triangle[0]]);\r\n            let endAngle = _getVertAngle(_center, _vertPos[triangle[1]]);\r\n            if (endAngle < startAngle) endAngle += PI_2;\r\n            startAngle -= PI_2;\r\n            endAngle -= PI_2;\r\n            //testing\r\n            for (let testIndex = 0; testIndex < 3; ++testIndex) {\r\n                if (startAngle >= fillEnd) {\r\n                    //all out\r\n                } else if (startAngle >= fillStart) {\r\n                    local.length = offset + floatsPerTriangle;\r\n                    if (endAngle >= fillEnd) {\r\n                        //startAngle to fillEnd\r\n                        this._generateTriangle(local, offset, _center, _vertPos[triangle[0]], _intersectPoint_2[triangleIndex]);\r\n                    } else {\r\n                        //startAngle to endAngle\r\n                        this._generateTriangle(local, offset, _center, _vertPos[triangle[0]], _vertPos[triangle[1]]);\r\n                    }\r\n                    offset += floatsPerTriangle;\r\n                } else {\r\n                    //startAngle < fillStart\r\n                    if (endAngle <= fillStart) {\r\n                        //all out\r\n                    } else if (endAngle <= fillEnd) {\r\n                        local.length = offset + floatsPerTriangle;\r\n                        //fillStart to endAngle\r\n                        this._generateTriangle(local, offset, _center, _intersectPoint_1[triangleIndex], _vertPos[triangle[1]]);\r\n                        offset += floatsPerTriangle;\r\n                    } else {\r\n                        local.length = offset + floatsPerTriangle;\r\n                        //fillStart to fillEnd\r\n                        this._generateTriangle(local, offset, _center, _intersectPoint_1[triangleIndex], _intersectPoint_2[triangleIndex]);\r\n                        offset += floatsPerTriangle;\r\n                    }\r\n                }\r\n                //add 2 * PI\r\n                startAngle += PI_2;\r\n                endAngle += PI_2;\r\n            }\r\n        }\r\n\r\n        this.allocWorldVerts(sprite);\r\n        this.updateWorldVerts(sprite);\r\n    }\r\n\r\n    public allocWorldVerts(sprite) {\r\n        let color = sprite.node._color._val;\r\n        let renderData = this._renderData;\r\n        let floatsPerVert = this.floatsPerVert;\r\n\r\n        let local = this._local;\r\n        let verticesCount = local.length / floatsPerVert;\r\n        this.verticesCount = this.indicesCount = verticesCount;\r\n\r\n        let flexBuffer = renderData._flexBuffer;\r\n        if (flexBuffer.reserve(verticesCount, verticesCount)) {\r\n            this.updateIndices();\r\n        }\r\n        flexBuffer.used(this.verticesCount, this.indicesCount);\r\n\r\n        let verts = renderData.vDatas[0],\r\n            uintVerts = renderData.uintVDatas[0];\r\n\r\n        let uvOffset = this.uvOffset;\r\n        for (let offset = 0; offset < local.length; offset += floatsPerVert) {\r\n            let start = offset + uvOffset;\r\n            verts[start] = local[start];\r\n            verts[start + 1] = local[start + 1];\r\n            uintVerts[start + 2] = color;\r\n        }\r\n    }\r\n\r\n    public updateIndices() {\r\n        let iData = this._renderData.iDatas[0];\r\n        for (let i = 0; i < iData.length; i++) {\r\n            iData[i] = i;\r\n        }\r\n    }\r\n\r\n    public updateWorldVerts(sprite) {\r\n        if (CC_NATIVERENDERER) {\r\n            let local = this._local;\r\n            let world = this._renderData.vDatas[0];\r\n            let floatsPerVert = this.floatsPerVert;\r\n            for (let offset = 0, l = world.length; offset < l; offset += floatsPerVert) {\r\n                world[offset] = local[offset];\r\n                world[offset + 1] = local[offset + 1];\r\n            }\r\n        } else {\r\n            let node = sprite.node;\r\n\r\n            let matrix = node._worldMatrix;\r\n            let matrixm = matrix.m,\r\n                a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5],\r\n                tx = matrixm[12], ty = matrixm[13];\r\n\r\n            let local = this._local;\r\n            let world = this._renderData.vDatas[0];\r\n            let floatsPerVert = this.floatsPerVert;\r\n            for (let offset = 0; offset < local.length; offset += floatsPerVert) {\r\n                let x = local[offset];\r\n                let y = local[offset + 1];\r\n                world[offset] = x * a + y * c + tx;\r\n                world[offset + 1] = x * b + y * d + ty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public _generateTriangle(verts, offset, vert0, vert1, vert2) {\r\n        let vertices = _vertices;\r\n        let v0x = vertices[0];\r\n        let v0y = vertices[1];\r\n        let v1x = vertices[2];\r\n        let v1y = vertices[3];\r\n\r\n        let floatsPerVert = this.floatsPerVert;\r\n        verts[offset] = vert0.x;\r\n        verts[offset + 1] = vert0.y;\r\n        verts[offset + floatsPerVert] = vert1.x;\r\n        verts[offset + floatsPerVert + 1] = vert1.y;\r\n        verts[offset + floatsPerVert * 2] = vert2.x;\r\n        verts[offset + floatsPerVert * 2 + 1] = vert2.y;\r\n\r\n        let uvOffset = this.uvOffset;\r\n        let progressX, progressY;\r\n        progressX = (vert0.x - v0x) / (v1x - v0x);\r\n        progressY = (vert0.y - v0y) / (v1y - v0y);\r\n        this._generateUV(progressX, progressY, verts, offset + uvOffset);\r\n\r\n        progressX = (vert1.x - v0x) / (v1x - v0x);\r\n        progressY = (vert1.y - v0y) / (v1y - v0y);\r\n        this._generateUV(progressX, progressY, verts, offset + floatsPerVert + uvOffset);\r\n\r\n        progressX = (vert2.x - v0x) / (v1x - v0x);\r\n        progressY = (vert2.y - v0y) / (v1y - v0y);\r\n        this._generateUV(progressX, progressY, verts, offset + floatsPerVert * 2 + uvOffset);\r\n    }\r\n\r\n    public _generateUV(progressX, progressY, verts, offset) {\r\n        let uvs = _uvs;\r\n        let px1 = uvs[0] + (uvs[2] - uvs[0]) * progressX;\r\n        let px2 = uvs[4] + (uvs[6] - uvs[4]) * progressX;\r\n        let py1 = uvs[1] + (uvs[3] - uvs[1]) * progressX;\r\n        let py2 = uvs[5] + (uvs[7] - uvs[5]) * progressX;\r\n        verts[offset] = px1 + (px2 - px1) * progressY;\r\n        verts[offset + 1] = py1 + (py2 - py1) * progressY;\r\n    }\r\n}\r\n"]}