{"version":3,"sources":["assets\\scripts\\animator\\AnimatorSpine.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import AnimatorSpineSecondary from \"./AnimatorSpineSecondary\";\r\nimport AnimatorBase, { AnimationPlayer } from \"./core/AnimatorBase\";\r\nimport AnimatorStateLogic from \"./core/AnimatorStateLogic\";\r\n\r\nconst { ccclass, property, requireComponent, disallowMultiple, menu } = cc._decorator;\r\n\r\n/** \r\n * Spine状态机组件（主状态机），trackIndex为0\r\n */\r\n@ccclass\r\n@disallowMultiple\r\n@requireComponent(sp.Skeleton)\r\n@menu('Framework/Animator/AnimatorSpine')\r\nexport default class AnimatorSpine extends AnimatorBase {\r\n    /** spine组件 */\r\n    private _spine: sp.Skeleton = null;\r\n    /** 动画完成的回调 */\r\n    private _completeListenerMap: Map<(entry?: any) => void, any> = new Map();\r\n    /** 次状态机注册的回调 */\r\n    private _secondaryListenerMap: Map<(entry?: any) => void, AnimatorSpineSecondary> = new Map();\r\n\r\n    protected start() {\r\n        if (!this.playOnStart || this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this._spine = this.getComponent(sp.Skeleton);\r\n        this._spine.setCompleteListener(this.onSpineComplete.bind(this));\r\n\r\n        if (this.assetRawUrl !== null) {\r\n            this.initJson(this.assetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 手动初始化状态机，可传入0-3个参数，类型如下\r\n     * - onStateChangeCall 状态切换时的回调\r\n     * - stateLogicMap 各个状态逻辑控制\r\n     * - animationPlayer 自定义动画控制\r\n     * @override\r\n     */\r\n    public onInit(...args: Array<Map<string, AnimatorStateLogic> | ((fromState: string, toState: string) => void) | AnimationPlayer>) {\r\n        if (this.playOnStart || this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this.initArgs(...args);\r\n\r\n        this._spine = this.getComponent(sp.Skeleton);\r\n        this._spine.setCompleteListener(this.onSpineComplete.bind(this));\r\n\r\n        if (this.assetRawUrl !== null) {\r\n            this.initJson(this.assetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    private onSpineComplete(entry: any) {\r\n        entry.trackIndex === 0 && this.onAnimFinished();\r\n        this._completeListenerMap.forEach((target, cb) => { target ? cb.call(target, entry) : cb(entry); });\r\n        this._secondaryListenerMap.forEach((target, cb) => { entry.trackIndex === target.trackIndex && cb.call(target, entry); });\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     * @override\r\n     * @param animName 动画名\r\n     * @param loop 是否循环播放\r\n     */\r\n    protected playAnimation(animName: string, loop: boolean) {\r\n        if (animName) {\r\n            this._spine.setAnimation(0, animName, loop);\r\n        } else {\r\n            this._spine.clearTrack(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 缩放动画播放速率\r\n     * @override\r\n     * @param scale 缩放倍率\r\n     */\r\n    protected scaleTime(scale: number) {\r\n        this._spine.timeScale = scale;\r\n    }\r\n\r\n    /**\r\n     * 注册次状态机动画结束的回调（状态机内部方法，不能由外部直接调用）\r\n     */\r\n    public addSecondaryListener(cb: (entry?: any) => void, target: AnimatorSpineSecondary) {\r\n        this._secondaryListenerMap.set(cb, target);\r\n    }\r\n\r\n    /**\r\n     * 注册动画完成时的监听\r\n     * @param cb 回调\r\n     * @param target 调用回调的this对象\r\n     */\r\n    public addCompleteListener(cb: (entry?: any) => void, target: any = null) {\r\n        if (this._completeListenerMap.has(cb)) {\r\n            return;\r\n        }\r\n        this._completeListenerMap.set(cb, target);\r\n    }\r\n\r\n    /**\r\n     * 注销动画完成的监听\r\n     * @param cb 回调\r\n     */\r\n    public removeCompleteListener(cb: (entry?: any) => void) {\r\n        this._completeListenerMap.delete(cb);\r\n    }\r\n\r\n    /**\r\n     * 清空动画完成的监听\r\n     */\r\n    public clearCompleteListener() {\r\n        this._completeListenerMap.clear;\r\n    }\r\n}\r\n"]}