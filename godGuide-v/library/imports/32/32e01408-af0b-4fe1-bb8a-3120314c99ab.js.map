{"version":3,"sources":["assets\\scripts\\animator\\AnimatorCustomization.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAoE;AAG9D,IAAA,KAAkE,EAAE,CAAC,UAAU,EAA7E,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,gBAAgB,sBAAA,EAAE,gBAAgB,sBAAA,EAAE,IAAI,UAAkB,CAAC;AAEtF;;GAEG;AAIH;IAAmD,yCAAY;IAA/D;QAAA,qEA+CC;QA9CG,yBAAyB;QAEf,iBAAW,GAAY,KAAK,CAAC;;IA4C3C,CAAC;IA1CG;;;;;;OAMG;IACI,sCAAM,GAAb;QAAc,cAAkH;aAAlH,UAAkH,EAAlH,qBAAkH,EAAlH,IAAkH;YAAlH,yBAAkH;;QAC5H,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,CAAC,QAAQ,OAAb,IAAI,EAAa,IAAI,EAAE;QAEvB,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACxC;IACL,CAAC;IAED;;;;;OAKG;IACO,6CAAa,GAAvB,UAAwB,QAAgB,EAAE,IAAa;QACnD,IAAI,IAAI,CAAC,gBAAgB,IAAI,QAAQ,EAAE;YACnC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACvD;IACL,CAAC;IAED;;;;OAIG;IACO,yCAAS,GAAnB,UAAoB,KAAa;QAC7B,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC1C;IACL,CAAC;IA3CD;QADC,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;8DACN;IAHtB,qBAAqB;QAHzC,OAAO;QACP,gBAAgB;QAChB,IAAI,CAAC,0CAA0C,CAAC;OAC5B,qBAAqB,CA+CzC;IAAD,4BAAC;CA/CD,AA+CC,CA/CkD,sBAAY,GA+C9D;kBA/CoB,qBAAqB","file":"","sourceRoot":"/","sourcesContent":["import AnimatorBase, { AnimationPlayer } from \"./core/AnimatorBase\";\r\nimport AnimatorStateLogic from \"./core/AnimatorStateLogic\";\r\n\r\nconst { ccclass, property, requireComponent, disallowMultiple, menu } = cc._decorator;\r\n\r\n/** \r\n * 自定义动画控制的状态机组件\r\n */\r\n@ccclass\r\n@disallowMultiple\r\n@menu('Framework/Animator/AnimatorCustomization')\r\nexport default class AnimatorCustomization extends AnimatorBase {\r\n    /** 此组件必须主动调用onInit初始化 */\r\n    @property({ override: true, visible: false })\r\n    protected playOnStart: boolean = false;\r\n\r\n    /**\r\n     * 手动初始化状态机，可传入0-3个参数，类型如下\r\n     * - onStateChangeCall 状态切换时的回调\r\n     * - stateLogicMap 各个状态逻辑控制\r\n     * - animationPlayer 自定义动画控制\r\n     * @override\r\n     */\r\n    public onInit(...args: Array<Map<string, AnimatorStateLogic> | ((fromState: string, toState: string) => void) | AnimationPlayer>) {\r\n        if (this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this.initArgs(...args);\r\n\r\n        if (this.assetRawUrl !== null) {\r\n            this.initJson(this.assetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     * @override\r\n     * @param animName 动画名\r\n     * @param loop 是否循环播放\r\n     */\r\n    protected playAnimation(animName: string, loop: boolean) {\r\n        if (this._animationPlayer && animName) {\r\n            this._animationPlayer.playAnimation(animName, loop);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 缩放动画播放速率\r\n     * @override\r\n     * @param scale 缩放倍率\r\n     */\r\n    protected scaleTime(scale: number) {\r\n        if (this._animationPlayer) {\r\n            this._animationPlayer.scaleTime(scale);\r\n        }\r\n    }\r\n}\r\n"]}