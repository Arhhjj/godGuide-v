{"version":3,"sources":["assets\\scripts\\common\\util\\Random.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Tool from \"./Tool\";\r\n\r\nconst CHARS: string[] = [\r\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\r\n    \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\r\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\r\n];\r\n\r\nconst BASE = 131;\r\nconst MOD = 19260817;\r\n\r\n/**\r\n * 可设置随机种子的随机数生成器\r\n */\r\nexport default class Random {\r\n\r\n    /**\r\n     * 计算字符串的hash值 返回值>=0\r\n     * @param str \r\n     * @param initHash 计算的初始值\r\n     */\r\n    public static hashCode(str: string, initHash: number = 0): number {\r\n        let hash = initHash;\r\n        if (!str) {\r\n            return hash;\r\n        }\r\n\r\n        for (let i = 0; i < str.length; i++) {\r\n            hash = (BASE * hash + str.charCodeAt(i)) % MOD;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * 随机生成一个种子编码\r\n     * @param length 编码字节长度\r\n     */\r\n    public static getSeed(length: number = 8): string {\r\n        let seed = \"\";\r\n        for (let i = 0; i < length; i++) {\r\n            seed += Tool.arrayRand(CHARS);\r\n        }\r\n        return seed;\r\n    }\r\n\r\n    /**\r\n     * 获取区间[0, 1)的浮点数\r\n     */\r\n    public static random(seed: string | number): number {\r\n        let seedCode: number = typeof seed === \"string\" ? this.hashCode(seed) : seed;\r\n        return (seedCode * 9301 + 49297) % 233280 / 233280;\r\n    }\r\n\r\n    /**\r\n     * 获取区间[min, max)的整数，传入1个参数则区间为[0, min)\r\n     */\r\n    public static int(seed: string | number, min: number, max: number = undefined): number {\r\n        if (max === undefined) {\r\n            max = min;\r\n            min = 0;\r\n        }\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(this.random(seed) * (max - min)) + min;\r\n    }\r\n\r\n    /**\r\n     * 获取区间[min, max)的浮点数，传入1个参数则区间为[0, min)\r\n     */\r\n    public static float(seed: string | number, min: number, max: number = undefined): number {\r\n        if (max === undefined) {\r\n            max = min;\r\n            min = 0;\r\n        }\r\n        return this.random(seed) * (max - min) + min;\r\n    }\r\n\r\n    /**\r\n     * 根据权重数组进行随机，返回结果下标\r\n     * @param weightArr 权重数组\r\n     * @returns 随机到的权重数组下标\r\n     */\r\n    public static randWeightIdx(seed: string | number, weightArr: number[]) {\r\n        let sum = 0;\r\n        for (let i = 0; i < weightArr.length; i++) {\r\n            sum += weightArr[i];\r\n        }\r\n        let randNum = this.float(seed, 0, sum);\r\n        let curValue = 0\r\n        for (let i = 0; i < weightArr.length; i++) {\r\n            curValue += weightArr[i];\r\n            if (randNum < curValue) {\r\n                return i;\r\n            }\r\n        }\r\n        return weightArr.length - 1;\r\n    }\r\n\r\n    /**\r\n     * Fisher–Yates shuffle 数组随机乱序\r\n     */\r\n    public static shuffle<T>(seed: string | number, arr: Array<T>): Array<T> {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            let randomIndex = Math.floor(this.random(seed) * (i + 1));\r\n            [arr[randomIndex], arr[i]] = [arr[i], arr[randomIndex]];\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * 随机返回数组中的一个元素\r\n     */\r\n    public static arrayRand<T>(seed: string | number, arr: Array<T>): T {\r\n        if (arr.length <= 0) {\r\n            return null;\r\n        }\r\n        return arr[this.int(seed, 0, arr.length)];\r\n    }\r\n}\r\n"]}